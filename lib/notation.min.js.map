{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///notation.min.js","webpack:///webpack/bootstrap f9c8d1090dad90f27bcf","webpack:///./src/utils.js","webpack:///./src/core/notation.error.js","webpack:///./src/index.js","webpack:///./src/core/Notation.js","webpack:///./src/core/notation.glob.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","value","toString","utils","isObject","isArray","ensureArray","undefined","hasOwn","prop","deepCopy","k","copy","each","array","callback","thisArg","length","index","eachRight","pregQuote","str","delimiter","String","replace","RegExp","stringOrArrayOf","hasSingleItemOf","arr","itemValue","arguments","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","writable","setPrototypeOf","__proto__","NotationError","_Error","message","_this","getPrototypeOf","Error","captureStackTrace","stack","_Notation","_Notation2","obj","_interopRequireDefault","_createClass","defineProperties","target","props","descriptor","key","protoProps","staticProps","_utils","_utils2","_notation","_notation2","_notation3","_notation4","ERR","SOURCE","DEST","NOTATION","NOTA_OBJ","Notation","_source","keys","list","N","notation","nKey","subKey","isValid","level","eachNote","levelNotation","note","push","merge","expand","result","has","lastNote","indexOf","upToLast","parent","last","inspect","defaultValue","overwrite","notationsObject","_this2","set","notations","_this3","inspectRemove","globNotations","_this4","original","globs","normalize","concat","filtered","shift","g","endStar","normalized","globNotation","absGlob","slice","isNegated","remove","copyFrom","originalNotation","test","destination","newNotation","moveTo","rename","copyTo","extract","extrude","split","countNotes","reverse","notes","levelNotes","join","Glob","NotationGlob","glob","ng","_","regexp","toRegExp","levels","bang","a","b","levelsA","levelsB","wild","mA","match","mB","wildA","wildB","negA","negB","nonNegA","nonNegB","globsArray","sort","compare","map","item","trim","indexOfDuplicate","splice","globToCheck","ins","globsA","globsB","arrA","arrB","reA","reB","insA","insB","keepNegated","aIndex","bIndex"],"mappings":"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","file":"notation.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Notation\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Notation\"] = factory();\n\telse\n\t\troot[\"Notation\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Notation\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Notation\"] = factory();\n\telse\n\t\troot[\"Notation\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"lib/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 2);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar toString = Object.prototype.toString;\n\nvar utils = {\n    isObject: function isObject(o) {\n        return toString.call(o) === '[object Object]';\n    },\n    isArray: function isArray(o) {\n        return toString.call(o) === '[object Array]';\n    },\n    ensureArray: function ensureArray(o) {\n        if (utils.isArray(o)) return o;\n        return o === null || o === undefined ? [] : [o];\n    },\n    hasOwn: function hasOwn(o, prop) {\n        return o && typeof o.hasOwnProperty === 'function' && o.hasOwnProperty(prop);\n    },\n    deepCopy: function deepCopy(object) {\n        if (!utils.isObject(object)) return object;\n        var k,\n            o,\n            copy = {};\n        for (k in object) {\n            if (utils.hasOwn(object, k)) {\n                o = object[k];\n                copy[k] = utils.isObject(o) ? utils.deepCopy(o) : o;\n            }\n        }\n        return copy;\n    },\n\n\n    // iterates over elements of an array, executing the callback for each\n    // element.\n    each: function each(array, callback, thisArg) {\n        var length = array.length,\n            index = -1;\n        while (++index < length) {\n            if (callback.call(thisArg, array[index], index, array) === false) break;\n        }\n    },\n    eachRight: function eachRight(array, callback) {\n        var index = array.length;\n        while (index--) {\n            if (callback(array[index], index, array) === false) break;\n        }\n    },\n\n\n    // Borrowed from http://phpjs.org/functions/preg_quote\n    pregQuote: function pregQuote(str, delimiter) {\n        return String(str).replace(new RegExp('[.\\\\\\\\+*?\\\\[\\\\^\\\\]$(){}=!<>|:\\\\' + (delimiter || '') + '-]', 'g'), '\\\\$&');\n    },\n    stringOrArrayOf: function stringOrArrayOf(o, value) {\n        return typeof o === 'string' && o === value || utils.isArray(o) && o.length === 1 && o[0] === value;\n    },\n    hasSingleItemOf: function hasSingleItemOf(arr, itemValue) {\n        return arr.length === 1 && (arguments.length === 2 ? arr[0] === itemValue : true);\n    }\n};\n\nexports.default = utils;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// TODO: instanceof return false.\n\n/**\n *  Error class specific to `Notation`.\n *  @name Notation.Error\n *  @memberof! Notation\n *  @class\n *\n */\nvar NotationError = function (_Error) {\n    _inherits(NotationError, _Error);\n\n    /**\n     *  Initializes a new `Notation.Error` instance.\n     *  @constructs Notation.Error\n     *  @param {String} message - The error message.\n     */\n    function NotationError() {\n        var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n        _classCallCheck(this, NotationError);\n\n        var _this = _possibleConstructorReturn(this, (NotationError.__proto__ || Object.getPrototypeOf(NotationError)).call(this, message));\n\n        _this.name = _this.constructor.name;\n\n        Object.defineProperty(_this, 'name', {\n            enumerable: false,\n            writable: false,\n            value: 'NotationError'\n        });\n\n        Object.defineProperty(_this, 'message', {\n            enumerable: false,\n            writable: true,\n            value: message\n        });\n\n        if (Error.hasOwnProperty('captureStackTrace')) {\n            // V8\n            Error.captureStackTrace(_this, _this.constructor);\n        } else {\n            Object.defineProperty(_this, 'stack', {\n                enumerable: false,\n                writable: false,\n                value: new Error(message).stack\n            });\n        }\n        return _this;\n    }\n\n    return NotationError;\n}(Error);\n\nexports.default = NotationError;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _Notation = __webpack_require__(3);\n\nvar _Notation2 = _interopRequireDefault(_Notation);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// export default Notation;\n// http://stackoverflow.com/a/33683495/112731\nmodule.exports = _Notation2.default;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _utils = __webpack_require__(0);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _notation = __webpack_require__(4);\n\nvar _notation2 = _interopRequireDefault(_notation);\n\nvar _notation3 = __webpack_require__(1);\n\nvar _notation4 = _interopRequireDefault(_notation3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ERR = {\n    SOURCE: 'Invalid source object.',\n    DEST: 'Invalid destination object.',\n    NOTATION: 'Invalid notation: ',\n    NOTA_OBJ: 'Invalid notations object: '\n};\n\n/**\n *  Notation.js for Node and Browser.\n *\n *  Like in most programming languages, JavaScript makes use of dot-notation to\n *  access the value of a member of an object (or class). `Notation` class\n *  provides various methods for modifying / processing the contents of the\n *  given object; by parsing object notation strings or globs.\n *\n *  Note that this class will only deal with enumerable properties of the source\n *  object; so it should be used to manipulate data objects. It will not deal\n *  with preserving the prototype-chain of the given object.\n *\n *  @author   Onur Yıldırım <onur@cutepilot.com>\n *  @license  MIT\n */\n\nvar Notation = function () {\n\n    /**\n     *  Initializes a new instance of `Notation`.\n     *\n     *  @param {Object} [object={}] - The source object to be notated.\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Dodge\", model: \"Charger\", year: 1970 } };\n     *  const notation = new Notation(obj);\n     *  notation.get('car.model'); // \"Charger\"\n     */\n    function Notation() {\n        var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, Notation);\n\n        // if defined, it should be an object.\n        if (!_utils2.default.isObject(object)) {\n            throw new _notation4.default(ERR.SOURCE);\n        }\n        this._source = object;\n    }\n\n    // --------------------------------\n    // Notation Instance Properties\n    // --------------------------------\n\n    /**\n     *  Gets the value of the source object.\n     *  @type {Object}\n     *\n     *  @example\n     *  const person = { name: \"Onur\" };\n     *  const me = Notation.create(person)\n     *      .set(\"age\", 36)\n     *      .set(\"car.brand\", \"Ford\")\n     *      .set(\"car.model\", \"Mustang\")\n     *      .value;\n     *  console.log(me); // { name: \"Onur\", age: 36, car: { brand: \"Ford\", model: \"Mustang\" } }\n     *  console.log(person === me); // true\n     */\n\n\n    _createClass(Notation, [{\n        key: 'each',\n\n\n        // --------------------------------\n        // Notation Instance Methods\n        // --------------------------------\n\n        /**\n         *  Recursively iterates through each key of the source object and invokes\n         *  the given callback function with parameters, on each non-object value.\n         *  @alias Notation#eachKey\n         *\n         *  @param {Function} callback - The callback function to be invoked on\n         *  each on each non-object value. To break out of the loop, return `false`\n         *  from within the callback.\n         *  Callback signature: `callback(notation, key, value, object) { ... }`\n         *\n         *  @returns {void}\n         *\n         *  @example\n         *  const obj = { car: { brand: \"Dodge\", model: \"Charger\", year: 1970 } };\n         *  Notation.create(obj).each(function (notation, key, value, object) {\n         *      console.log(notation, value);\n         *  });\n         *  // \"car.brand\"  \"Dodge\"\n         *  // \"car.model\"  \"Charger\"\n         *  // \"car.year\"  1970\n         */\n        value: function each(callback) {\n            var _this = this;\n\n            var o = this._source,\n                keys = Object.keys(o);\n            _utils2.default.each(keys, function (key, index, list) {\n                // this is preserved in arrow functions\n                var prop = o[key],\n                    N = void 0;\n                if (_utils2.default.isObject(prop)) {\n                    N = new Notation(prop);\n                    N.each(function (notation, nKey, value, prop) {\n                        var subKey = key + '.' + notation;\n                        callback.call(N, subKey, nKey, value, o);\n                    });\n                } else {\n                    callback.call(_this, key, key, prop, o);\n                }\n            });\n        }\n        /**\n         *  Alias for `#each`\n         *  @private\n         */\n\n    }, {\n        key: 'eachKey',\n        value: function eachKey(callback) {\n            return this.each(callback);\n        }\n\n        /**\n         *  Iterates through each note of the given notation string by evaluating\n         *  it on the source object.\n         *\n         *  @param {String} notation - The notation string to be iterated through.\n         *  @param {Function} callback - The callback function to be invoked on\n         *  each iteration. To break out of the loop, return `false` from within\n         *  the callback.\n         *  Callback signature: `callback(levelValue, note, index, list) { ... }`\n         *\n         *  @returns {void}\n         *\n         *  @example\n         *  const obj = { car: { brand: \"Dodge\", model: \"Charger\", year: 1970 } };\n         *  Notation.create(obj)\n         *      .eachValue(\"car.brand\", function (levelValue, note, index, list) {\n         *          console.log(note, levelValue); // \"car.brand\" \"Dodge\"\n         *      });\n         */\n\n    }, {\n        key: 'eachValue',\n        value: function eachValue(notation, callback) {\n            if (!Notation.isValid(notation)) {\n                throw new _notation4.default(ERR.NOTATION + '`' + notation + '`');\n            }\n            var level = this._source;\n            Notation.eachNote(notation, function (levelNotation, note, index, list) {\n                level = _utils2.default.hasOwn(level, note) ? level[note] : undefined;\n                if (callback(level, levelNotation, note, index, list) === false) return false;\n            });\n        }\n\n        /**\n         *  Gets the list of notations from the source object (keys).\n         *\n         *  @returns {Array} - An array of notation strings.\n         *\n         *  @example\n         *  const obj = { car: { brand: \"Dodge\", model: \"Charger\", year: 1970 } };\n         *  const notations = Notation.create(obj).getNotations();\n         *  console.log(notations); // [ \"car.brand\", \"car.model\", \"car.year\" ]\n         */\n\n    }, {\n        key: 'getNotations',\n        value: function getNotations() {\n            var list = [];\n            this.each(function (notation, key, value, obj) {\n                list.push(notation);\n            });\n            return list;\n        }\n\n        /**\n         *  Flattens the source object to a single-level object with notated keys.\n         *\n         *  @returns {Notation} - Returns the current `Notation` instance (self).\n         *\n         *  @example\n         *  const obj = { car: { brand: \"Dodge\", model: \"Charger\", year: 1970 } };\n         *  const flat = Notation.create(obj).flatten().value;\n         *  console.log(flat);\n         *  // { \"car.brand\": \"Dodge\", \"car.model\": \"Charger\", \"car.year\": 1970 }\n         */\n\n    }, {\n        key: 'flatten',\n        value: function flatten() {\n            var o = {};\n            this.each(function (notation, key, value, obj) {\n                o[notation] = value;\n            });\n            // return o;\n            this._source = o;\n            return this;\n        }\n\n        /**\n         *  Aggregates notated keys of a (single-level) object, and nests them under\n         *  their corresponding properties. This is the opposite of `Notation#flatten`\n         *  method. This might be useful when expanding a flat object fetched from\n         *  a database.\n         *  @alias Notation#aggregate\n         *  @chainable\n         *\n         *  @returns {Notation} - Returns the current `Notation` instance (self).\n         *\n         *  @example\n         *  const obj = { \"car.brand\": \"Dodge\", \"car.model\": \"Charger\", \"car.year\": 1970 }\n         *  const expanded = Notation.create(obj).expand().value;\n         *  console.log(expanded); // { car: { brand: \"Dodge\", model: \"Charger\", year: 1970 } };\n         */\n\n    }, {\n        key: 'expand',\n        value: function expand() {\n            this._source = Notation.create({}).merge(this._source).value;\n            return this;\n        }\n        /**\n         *  Alias for `#expand`\n         *  @private\n         */\n\n    }, {\n        key: 'aggregate',\n        value: function aggregate() {\n            return this.expand();\n        }\n\n        /**\n         *  Inspects the given notation on the source object by checking\n         *  if the source object actually has the notated property;\n         *  and getting its value if exists.\n         *\n         *  @param {String} notation - The notation string to be inspected.\n         *\n         *  @returns {InspectResult} - The result object.\n         *\n         *  @example\n         *  Notation.create({ car: { year: 1970 } }).inspect(\"car.year\");\n         *  // { has: true, value: 1970 }\n         *  Notation.create({ car: { year: 1970 } }).inspect(\"car.color\");\n         *  // { has: false, value: undefined }\n         *  Notation.create({ car: { color: undefined } }).inspect(\"car.color\");\n         *  // { has: true, value: undefined }\n         */\n\n    }, {\n        key: 'inspect',\n        value: function inspect(notation) {\n            if (!Notation.isValid(notation)) {\n                throw new _notation4.default(ERR.NOTATION + '`' + notation + '`');\n            }\n            var level = this._source,\n                result = { has: false, value: undefined };\n            Notation.eachNote(notation, function (levelNotation, note, index, list) {\n                if (_utils2.default.hasOwn(level, note)) {\n                    level = level[note];\n                    result = { has: true, value: level };\n                } else {\n                    // level = undefined;\n                    result = { has: false, value: undefined };\n                    return false; // break out\n                }\n            });\n            return result;\n        }\n        /**\n         *  Notation inspection result object.\n         *  @typedef Notation~InspectResult\n         *  @type Object\n         *  @property {Boolean} has - Indicates whether the source object has the given\n         *  notation as a (leveled) enumerable property. If the property exists but has\n         *  a value of `undefined`, this will still return `true`.\n         *  @property {*} value - The value of the notated property. If the source object\n         *  does not have the notation, the value will be `undefined`.\n         */\n\n        /**\n         *  Inspects and removes the given notation from the source object\n         *  by checking if the source object actually has the notated property;\n         *  and getting its value if exists, before removing the property.\n         *\n         *  @param {String} notation - The notation string to be inspected.\n         *\n         *  @returns {InspectResult} - The result object.\n         *\n         *  @example\n         *  const obj = { name: \"John\", car: { year: 1970 } };\n         *  Notation.create(obj).inspectRemove(\"car.year\"); // { has: true, value: 1970 }\n         *  // obj » { name: \"John\", car: {} }\n         *  Notation.create(obj).inspectRemove(\"car.year\", true); // { has: true, value: 1970 }\n         *  // obj » { name: \"John\" }\n         *  Notation.create({ car: { year: 1970 } }).inspectRemove(\"car.color\");\n         *  // { has: false, value: undefined }\n         *  Notation.create({ car: { color: undefined } }).inspectRemove(\"car.color\");\n         *  // { has: true, value: undefined }\n         */\n\n    }, {\n        key: 'inspectRemove',\n        value: function inspectRemove(notation) {\n            if (!Notation.isValid(notation)) {\n                throw new _notation4.default(ERR.NOTATION + '`' + notation + '`');\n            }\n            var o = void 0,\n                lastNote = void 0;\n            if (notation.indexOf('.') < 0) {\n                lastNote = notation;\n                o = this._source;\n            } else {\n                var upToLast = Notation.parent(notation);\n                lastNote = Notation.last(notation);\n                o = this.inspect(upToLast).value;\n            }\n            var result = void 0;\n            if (_utils2.default.hasOwn(o, lastNote)) {\n                result = { has: true, value: o[lastNote] };\n                delete o[lastNote];\n            } else {\n                result = { has: false, value: undefined };\n            }\n\n            return result;\n        }\n\n        /**\n         *  Checks whether the source object has the given notation\n         *  as a (leveled) enumerable property. If the property exists\n         *  but has a value of `undefined`, this will still return `true`.\n         *\n         *  @param {String} notation - The notation string to be checked.\n         *\n         *  @returns {Boolean}\n         *\n         *  @example\n         *  Notation.create({ car: { year: 1970 } }).has(\"car.year\"); // true\n         *  Notation.create({ car: { year: undefined } }).has(\"car.year\"); // true\n         *  Notation.create({}).has(\"car.color\"); // false\n         */\n\n    }, {\n        key: 'has',\n        value: function has(notation) {\n            return this.inspect(notation).has;\n        }\n\n        /**\n         *  Checks whether the source object has the given notation\n         *  as a (leveled) defined enumerable property. If the property\n         *  exists but has a value of `undefined`, this will return `false`.\n         *\n         *  @param {String} notation - The notation string to be checked.\n         *\n         *  @returns {Boolean}\n         *\n         *  @example\n         *  Notation.create({ car: { year: 1970 } }).hasDefined(\"car.year\"); // true\n         *  Notation.create({ car: { year: undefined } }).hasDefined(\"car.year\"); // false\n         *  Notation.create({}).hasDefined(\"car.color\"); // false\n         */\n\n    }, {\n        key: 'hasDefined',\n        value: function hasDefined(notation) {\n            return this.inspect(notation).value !== undefined;\n        }\n\n        /**\n         *  Gets the value of the corresponding property at the given\n         *  notation.\n         *\n         *  @param {String} notation - The notation string to be processed.\n         *  @param {String} [defaultValue] - The default value to be returned if\n         *  the property is not found or enumerable.\n         *\n         *  @returns {*} - The value of the notated property.\n         *\n         *  @example\n         *  Notation.create({ car: { brand: \"Dodge\" } }).get(\"car.brand\"); // \"Dodge\"\n         *  Notation.create({ car: {} }).get(\"car.model\"); // undefined\n         *  Notation.create({ car: {} }).get(\"car.model\", \"Challenger\"); // \"Challenger\"\n         *  Notation.create({ car: { model: undefined } }).get(\"car.model\", \"Challenger\"); // undefined\n         */\n\n    }, {\n        key: 'get',\n        value: function get(notation, defaultValue) {\n            var result = this.inspect(notation);\n            return !result.has ? defaultValue : result.value;\n        }\n\n        /**\n         *  Sets the value of the corresponding property at the given\n         *  notation. If the property does not exist, it will be created\n         *  and nested at the calculated level. If it exists; its value\n         *  will be overwritten by default.\n         *  @chainable\n         *\n         *  @param {String} notation - The notation string to be processed.\n         *  @param {*} value - The value to be set for the notated property.\n         *  @param {Boolean} [overwrite=true] - Whether to overwrite the property\n         *  if exists.\n         *\n         *  @returns {Notation} - Returns the current `Notation` instance (self).\n         *\n         *  @example\n         *  const obj = { car: { brand: \"Dodge\", year: 1970 } };\n         *  Notation.create(obj)\n         *      .set(\"car.brand\", \"Ford\")\n         *      .set(\"car.model\", \"Mustang\")\n         *      .set(\"car.year\", 1965, false)\n         *      .set(\"car.color\", \"red\")\n         *      .set(\"boat\", \"none\");\n         *  console.log(obj);\n         *  // { notebook: \"Mac\", car: { brand: \"Ford\", model: \"Mustang\", year: 1970, color: \"red\" }, boat: \"none\" };\n         */\n\n    }, {\n        key: 'set',\n        value: function set(notation, value) {\n            var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            if (!Notation.isValid(notation)) {\n                throw new _notation4.default(ERR.NOTATION + '`' + notation + '`');\n            }\n            var level = this._source,\n                last = void 0;\n            Notation.eachNote(notation, function (levelNotation, note, index, list) {\n                last = index === list.length - 1;\n                // check if the property is at this level\n                if (_utils2.default.hasOwn(level, note)) {\n                    // check if we're at the last level\n                    if (last) {\n                        // if overwrite is set, assign the value.\n                        if (overwrite) level[note] = value;\n                    } else {\n                        // if not, just re-reference the current level.\n                        level = level[note];\n                    }\n                } else {\n                    // we don't have this property at this level\n                    // so; if this is the last level, we set the value\n                    // if not, we set an empty object for the next level\n                    level = level[note] = last ? value : {};\n                }\n            });\n            return this;\n        }\n\n        /**\n         *  Just like the `.set()` method but instead of a single notation\n         *  string, an object of notations and values can be passed.\n         *  Sets the value of each corresponding property at the given\n         *  notation. If a property does not exist, it will be created\n         *  and nested at the calculated level. If it exists; its value\n         *  will be overwritten by default.\n         *  @chainable\n         *\n         *  @param {Object} notationsObject - The notations object to be processed.\n         *  This can either be a regular object with non-dotted keys\n         *  (which will be merged to the first/root level of the source object);\n         *  or a flattened object with notated (dotted) keys.\n         *  @param {Boolean} [overwrite=true] - Whether to overwrite a property if\n         *  exists.\n         *\n         *  @returns {Notation} - Returns the current `Notation` instance (self).\n         *\n         *  @example\n         *  const obj = { car: { brand: \"Dodge\", year: 1970 } };\n         *  Notation.create(obj).merge({\n         *      \"car.brand\": \"Ford\",\n         *      \"car.model\": \"Mustang\",\n         *      \"car.year\": 1965,\n         *      \"car.color\": \"red\",\n         *      \"boat\": \"none\"\n         *  });\n         *  console.log(obj);\n         *  // { car: { brand: \"Ford\", model: \"Mustang\", year: 1970, color: \"red\" }, boat: \"none\" };\n         */\n\n    }, {\n        key: 'merge',\n        value: function merge(notationsObject) {\n            var _this2 = this;\n\n            var overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            if (!_utils2.default.isObject(notationsObject)) {\n                throw new _notation4.default(ERR.NOTA_OBJ + '`' + notationsObject + '`');\n            }\n            var value = void 0;\n            _utils2.default.each(Object.keys(notationsObject), function (notation, index, obj) {\n                // this is preserved in arrow functions\n                value = notationsObject[notation];\n                _this2.set(notation, value, overwrite);\n            });\n            return this;\n        }\n\n        /**\n         *  Removes the properties by the given list of notations from the source\n         *  object and returns a new object with the removed properties.\n         *  Opposite of `merge()` method.\n         *\n         *  @param {Array} notations - The notations array to be processed.\n         *\n         *  @returns {Object} - An object with the removed properties.\n         *\n         *  @example\n         *  const obj = { car: { brand: \"Dodge\", year: 1970 }, notebook: \"Mac\" };\n         *  const separated = Notation.create(obj).separate([\"car.brand\", \"boat\" ]);\n         *  console.log(separated);\n         *  // { notebook: \"Mac\", car: { brand: \"Ford\" } };\n         *  console.log(obj);\n         *  // { car: { year: 1970 } };\n         */\n\n    }, {\n        key: 'separate',\n        value: function separate(notations) {\n            var _this3 = this;\n\n            if (!_utils2.default.isArray(notations)) {\n                throw new _notation4.default(ERR.NOTA_OBJ + '`' + notations + '`');\n            }\n            var o = new Notation({});\n            _utils2.default.each(notations, function (notation, index, obj) {\n                var result = _this3.inspectRemove(notation);\n                o.set(notation, result.value);\n            });\n            this._source = o._source;\n            return this;\n        }\n\n        /**\n         *  Deep clones the source object while filtering its properties\n         *  by the given glob notations. Includes all matched properties\n         *  and removes the rest.\n         *\n         *  @param {Array|String} globNotations - The glob notation(s) to\n         *  be processed. The difference between normal notations and\n         *  glob-notations is that you can use wildcard stars (*) and\n         *  negate the notation by prepending a bang (!). A negated\n         *  notation will be excluded. Order of the globs do not matter,\n         *  they will be logically sorted. Loose globs will be processed\n         *  first and verbose globs or normal notations will be processed\n         *  last. e.g. `[ \"car.model\", \"*\", \"!car.*\" ]` will be sorted as\n         *  `[ \"*\", \"!car.*\", \"car.model\" ]`.\n         *  Passing no parameters or passing an empty string (`\"\"` or `[\"\"]`)\n         *  will empty the source object.\n         *  @chainable\n         *\n         *  @returns {Notation} - Returns the current `Notation` instance (self).\n         *\n         *  @example\n         *  const obj = { notebook: \"Mac\", car: { brand: \"Ford\", model: \"Mustang\", year: 1970, color: \"red\" } };\n         *  const notation = Notation.create(obj);\n         *  notation.filter([ \"*\", \"!car.*\", \"car.model\" ]);\n         *  console.log(obj);       // { notebook: \"Mac\", car: { model: \"Mustang\" } }\n         *  notation.filter(\"*\");   // re-filtering the current contents\n         *  console.log(obj);       // { notebook: \"Mac\", car: { model: \"Mustang\" } }\n         *  notation.filter();      // or notation.filter(\"\");\n         *  console.log(obj);       // {}\n         */\n\n    }, {\n        key: 'filter',\n        value: function filter(globNotations) {\n            var _this4 = this;\n\n            var original = this.value;\n            var copy = _utils2.default.deepCopy(original);\n\n            // ensure array, normalize and sort the globs in logical order. we also\n            // concat the array first (to prevent mutating the original) bec. we'll\n            // change it's content via `.shift()`\n            var globs = _notation2.default.normalize(globNotations).concat();\n\n            // if globs only consist of \"*\"; set the \"copy\" as source and return.\n            if (_utils2.default.stringOrArrayOf(globs, '*')) {\n                this._source = copy;\n                return this;\n            }\n            // if globs is \"\" or [\"\"] set source to `{}` and return.\n            if (arguments.length === 0 || _utils2.default.stringOrArrayOf(globs, '') || _utils2.default.stringOrArrayOf(globs, '!*')) {\n                this._source = {};\n                return this;\n            }\n\n            var filtered = void 0;\n            // if the first item of sorted globs is \"*\" we set the source to the\n            // (full) \"copy\" and remove the \"*\" from globs (not to re-process).\n            if (globs[0] === '*') {\n                filtered = new Notation(copy);\n                globs.shift();\n            } else {\n                // otherwise we set an empty object as the source so that we can\n                // add notations/properties to it.\n                filtered = new Notation({});\n            }\n\n            var g = void 0,\n                endStar = void 0,\n                normalized = void 0;\n            // iterate through globs\n            _utils2.default.each(globs, function (globNotation, index, array) {\n                // console.log('--->', globNotation);\n                g = new _notation2.default(globNotation);\n                // set flag that indicates whether the glob ends with `.*`\n                endStar = g.absGlob.slice(-2) === '.*';\n                // get the remaining part as the (extra) normalized glob\n                normalized = endStar ? g.absGlob.slice(0, -2) : g.absGlob;\n                // normalized = endStar ? g.absGlob.replace(/(\\.\\*)+$/, '') : g.absGlob;\n                // check if normalized glob has no wildcard stars e.g. \"a.b\" or\n                // \"!a.b.c\" etc..\n                if (normalized.indexOf('*') < 0) {\n                    if (g.isNegated) {\n                        // directly remove the notation if negated\n                        filtered.remove(normalized);\n                        // if original glob had `.*` at the end, it means remove\n                        // contents (not itself). so we'll set an empty object.\n                        // meaning `some.prop` (prop) is removed completely but\n                        // `some.prop.*` (prop) results in `{}`.\n                        if (endStar) filtered.set(normalized, {}, true);\n                    } else {\n                        // directly copy the same notation from the original\n                        filtered.copyFrom(original, normalized, null, true);\n                    }\n                    // move to the next\n                    return true;\n                }\n                // if glob has wildcard star(s), we'll iterate through keys of the\n                // source object and see if (full) notation of each key matches\n                // the current glob.\n\n                // TODO: Optimize the loop below. Instead of checking each key's\n                // notation, get the non-star left part of the glob and iterate\n                // that property of the source object.\n                _this4.each(function (originalNotation, key, value, obj) {\n                    // console.log('>>', originalNotation);\n\n                    // iterating each note of original notation. i.e.:\n                    // note1.note2.note3 is iterated from left to right, as:\n                    // 'note1', 'note1.note2', 'note1.note2.note3' — in order.\n                    Notation.eachNote(originalNotation, function (levelNotation, note, index, list) {\n                        if (g.test(levelNotation)) {\n                            if (g.isNegated) {\n                                // console.log('removing', levelNotation, 'of', originalNotation);\n                                filtered.remove(levelNotation);\n                                // we break and return early if removed bec. deeper\n                                // level props are also removed with this parent.\n                                // e.g. when 'note1.note2' of 'note1.note2.note3' is\n                                // removed, we no more have 'note3'.\n                                return false;\n                            }\n                            filtered.set(levelNotation, value, true);\n                        }\n                    });\n                });\n            });\n            // finally set the filtered's value as the source of our instance and\n            // return.\n            this._source = filtered.value;\n            return this;\n        }\n\n        /**\n         *  Removes the property from the source object, at the given notation.\n         *  @alias Notation#delete\n         *  @chainable\n         *\n         *  @param {String} notation - The notation to be inspected.\n         *\n         *  @returns {Notation} - Returns the current `Notation` instance (self).\n         *\n         *  @example\n         *  const obj = { notebook: \"Mac\", car: { model: \"Mustang\" } };\n         *  Notation.create(obj).remove(\"car.model\");\n         *  console.log(obj); // { notebook: \"Mac\", car: { } }\n         */\n\n    }, {\n        key: 'remove',\n        value: function remove(notation) {\n            this.inspectRemove(notation);\n            return this;\n        }\n        /**\n         *  Alias of `Notation#remove`\n         *  @private\n         */\n\n    }, {\n        key: 'delete',\n        value: function _delete(notation) {\n            this.remove(notation);\n            return this;\n        }\n\n        /**\n         *  Clones the `Notation` instance to a new one.\n         *\n         *  @returns {Notation} - A new copy of the instance.\n         */\n\n    }, {\n        key: 'clone',\n        value: function clone() {\n            var o = _utils2.default.deepCopy(this.value);\n            return new Notation(o);\n        }\n\n        /**\n         *  Copies the notated property from the source object and adds it to the\n         *  destination — only if the source object actually has that property.\n         *  This is different than a property with a value of `undefined`.\n         *  @chainable\n         *\n         *  @param {Object} destination - The destination object that the notated\n         *  properties will be copied to.\n         *  @param {String} notation - The notation to get the corresponding property\n         *  from the source object.\n         *  @param {String} [newNotation=null] - The notation to set the source property\n         *  on the destination object. In other words, the copied property will be\n         *  renamed to this value before set on the destination object. If not set,\n         *  `notation` argument will be used.\n         *  @param {Boolean} [overwrite=true] - Whether to overwrite the property on\n         *  the destination object if it exists.\n         *\n         *  @returns {Notation} - Returns the current `Notation` instance (self).\n         *\n         *  @example\n         *  const obj = { car: { brand: \"Ford\", model: \"Mustang\" } };\n         *  const models = { dodge: \"Charger\" };\n         *  Notation.create(obj).copyTo(models, \"car.model\", \"ford\");\n         *  console.log(models);\n         *  // { dodge: \"Charger\", ford: \"Mustang\" }\n         *  // source object (obj) is not modified\n         */\n\n    }, {\n        key: 'copyTo',\n        value: function copyTo(destination, notation) {\n            var newNotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n            var overwrite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n            if (!_utils2.default.isObject(destination)) throw new _notation4.default(ERR.DEST);\n            var result = this.inspect(notation);\n            if (result.has) {\n                new Notation(destination).set(newNotation || notation, result.value, overwrite);\n            }\n            return this;\n        }\n\n        /**\n         *  Copies the notated property from the destination object and adds it to the\n         *  source object — only if the destination object actually has that property.\n         *  This is different than a property with a value of `undefined`.\n         *  @chainable\n         *\n         *  @param {Object} destination - The destination object that the notated\n         *  properties will be copied from.\n         *  @param {String} notation - The notation to get the corresponding property\n         *  from the destination object.\n         *  @param {String} [newNotation=null] - The notation to set the destination\n         *  property on the source object. In other words, the copied property\n         *  will be renamed to this value before set on the source object.\n         *  If not set, `notation` argument will be used.\n         *  @param {Boolean} [overwrite=true] - Whether to overwrite the property\n         *  on the source object if it exists.\n         *\n         *  @returns {Notation} - Returns the current `Notation` instance (self).\n         *\n         *  @example\n         *  const obj = { car: { brand: \"Ford\", model: \"Mustang\" } };\n         *  const models = { dodge: \"Charger\" };\n         *  Notation.create(obj).copyFrom(models, \"dodge\", \"car.model\", true);\n         *  console.log(obj);\n         *  // { car: { brand: \"Ford\", model: \"Charger\" } }\n         *  // models object is not modified\n         */\n\n    }, {\n        key: 'copyFrom',\n        value: function copyFrom(destination, notation) {\n            var newNotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n            var overwrite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n            if (!_utils2.default.isObject(destination)) throw new _notation4.default(ERR.DEST);\n            var result = new Notation(destination).inspect(notation);\n            if (result.has) {\n                this.set(newNotation || notation, result.value, overwrite);\n            }\n            return this;\n        }\n\n        /**\n         *  Removes the notated property from the source object and adds it to the\n         *  destination — only if the source object actually has that property.\n         *  This is different than a property with a value of `undefined`.\n         *  @chainable\n         *\n         *  @param {Object} destination - The destination object that the notated\n         *  properties will be moved to.\n         *  @param {String} notation - The notation to get the corresponding\n         *  property from the source object.\n         *  @param {String} [newNotation=null] - The notation to set the source property\n         *  on the destination object. In other words, the moved property will be\n         *  renamed to this value before set on the destination object. If not set,\n         *  `notation` argument will be used.\n         *  @param {Boolean} [overwrite=true] - Whether to overwrite the property on\n         *  the destination object if it exists.\n         *\n         *  @returns {Notation} - Returns the current `Notation` instance (self).\n         *\n         *  @example\n         *  const obj = { car: { brand: \"Ford\", model: \"Mustang\" } };\n         *  const models = { dodge: \"Charger\" };\n         *  Notation.create(obj).moveTo(models, \"car.model\", \"ford\");\n         *  console.log(obj);\n         *  // { car: { brand: \"Ford\" } }\n         *  console.log(models);\n         *  // { dodge: \"Charger\", ford: \"Mustang\" }\n         */\n\n    }, {\n        key: 'moveTo',\n        value: function moveTo(destination, notation) {\n            var newNotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n            var overwrite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n            if (!_utils2.default.isObject(destination)) throw new _notation4.default(ERR.DEST);\n            var result = this.inspectRemove(notation);\n            if (result.has) {\n                new Notation(destination).set(newNotation || notation, result.value, overwrite);\n            }\n            return this;\n        }\n\n        /**\n         *  Removes the notated property from the destination object and adds it to the\n         *  source object — only if the destination object actually has that property.\n         *  This is different than a property with a value of `undefined`.\n         *  @chainable\n         *\n         *  @param {Object} destination - The destination object that the notated\n         *  properties will be moved from.\n         *  @param {String} notation - The notation to get the corresponding property\n         *  from the destination object.\n         *  @param {String} [newNotation=null] - The notation to set the destination\n         *  property on the source object. In other words, the moved property\n         *  will be renamed to this value before set on the source object.\n         *  If not set, `notation` argument will be used.\n         *  @param {Boolean} [overwrite=true] - Whether to overwrite the property on\n         *  the source object if it exists.\n         *\n         *  @returns {Notation} - Returns the current `Notation` instance (self).\n         *\n         *  @example\n         *  const obj = { car: { brand: \"Ford\", model: \"Mustang\" } };\n         *  const models = { dodge: \"Charger\" };\n         *  Notation.create(obj).moveFrom(models, \"dodge\", \"car.model\", true);\n         *  console.log(obj);\n         *  // { car: { brand: \"Ford\", model: \"Charger\" } }\n         *  console.log(models);\n         *  // {}\n         */\n\n    }, {\n        key: 'moveFrom',\n        value: function moveFrom(destination, notation) {\n            var newNotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n            var overwrite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n            if (!_utils2.default.isObject(destination)) throw new _notation4.default(ERR.DEST);\n            var result = new Notation(destination).inspectRemove(notation);\n            if (result.has) {\n                this.set(newNotation || notation, result.value, overwrite);\n            }\n            return this;\n        }\n\n        /**\n         *  Renames the notated property of the source object by the new notation.\n         *  @alias Notation#renote\n         *  @chainable\n         *\n         *  @param {String} notation - The notation to get the corresponding\n         *  property (value) from the source object.\n         *  @param {String} newNotation - The new notation for the targeted\n         *  property value. If not set, the source object will not be modified.\n         *  @param {Boolean} [overwrite=true] - Whether to overwrite the property at\n         *  the new notation, if it exists.\n         *\n         *  @returns {Notation} - Returns the current `Notation` instance (self).\n         *\n         *  @example\n         *  const obj = { car: { brand: \"Ford\", model: \"Mustang\" } };\n         *  Notation.create(obj)\n         *      .rename(\"car.brand\", \"carBrand\")\n         *      .rename(\"car.model\", \"carModel\");\n         *  console.log(obj);\n         *  // { carBrand: \"Ford\", carModel: \"Mustang\" }\n         */\n\n    }, {\n        key: 'rename',\n        value: function rename(notation, newNotation, overwrite) {\n            if (!newNotation) return this;\n            return this.moveTo(this._source, notation, newNotation, overwrite);\n        }\n        /**\n         *  Alias for `#rename`\n         *  @private\n         */\n\n    }, {\n        key: 'renote',\n        value: function renote(notation, newNotation, overwrite) {\n            return this.rename(notation, newNotation, overwrite);\n        }\n\n        /**\n         *  Extracts the property at the given notation to a new object by copying\n         *  it from the source object. This is equivalent to `.copyTo({}, notation, newNotation)`.\n         *  @alias Notation#copyToNew\n         *\n         *  @param {String} notation - The notation to get the corresponding\n         *  property (value) from the source object.\n         *  @param {String} newNotation - The new notation to be set on the new\n         *  object for the targeted property value. If not set, `notation` argument\n         *  will be used.\n         *\n         *  @returns {Object} - Returns a new object with the notated property.\n         *\n         *  @example\n         *  const obj = { car: { brand: \"Ford\", model: \"Mustang\" } };\n         *  const extracted = Notation.create(obj).extract(\"car.brand\", \"carBrand\");\n         *  console.log(extracted);\n         *  // { carBrand: \"Ford\" }\n         *  // obj is not modified\n         */\n\n    }, {\n        key: 'extract',\n        value: function extract(notation, newNotation) {\n            var o = {};\n            this.copyTo(o, notation, newNotation);\n            return o;\n        }\n        /**\n         *  Alias for `#extract`\n         *  @private\n         */\n\n    }, {\n        key: 'copyToNew',\n        value: function copyToNew(notation, newNotation) {\n            return this.extract(notation, newNotation);\n        }\n\n        /**\n         *  Extrudes the property at the given notation to a new object by moving\n         *  it from the source object. This is equivalent to `.moveTo({}, notation, newNotation)`.\n         *  @alias Notation#moveToNew\n         *\n         *  @param {String} notation - The notation to get the corresponding\n         *  property (value) from the source object.\n         *  @param {String} newNotation - The new notation to be set on the new\n         *  object for the targeted property value. If not set, `notation` argument\n         *  will be used.\n         *\n         *  @returns {Object} - Returns a new object with the notated property.\n         *\n         *  @example\n         *  const obj = { car: { brand: \"Ford\", model: \"Mustang\" } };\n         *  const extruded = Notation.create(obj).extrude(\"car.brand\", \"carBrand\");\n         *  console.log(obj);\n         *  // { car: { model: \"Mustang\" } }\n         *  console.log(extruded);\n         *  // { carBrand: \"Ford\" }\n         */\n\n    }, {\n        key: 'extrude',\n        value: function extrude(notation, newNotation) {\n            var o = {};\n            this.moveTo(o, notation, newNotation);\n            return o;\n        }\n        /**\n         *  Alias for `#extrude`\n         *  @private\n         */\n\n    }, {\n        key: 'moveToNew',\n        value: function moveToNew(notation, newNotation) {\n            return this.extrude(notation, newNotation);\n        }\n\n        // --------------------------------\n        // Notation Static Methods\n        // --------------------------------\n\n        /**\n         *  Basically constructs a new `Notation` instance with the given object.\n         *  @chainable\n         *\n         *  @param {Object} [object={}] - The object to be notated.\n         *\n         *  @returns {Notation} - The created instance.\n         *\n         *  @example\n         *  const notation = Notation.create(obj);\n         *  // equivalent to:\n         *  const notation = new Notation(obj);\n         */\n\n    }, {\n        key: 'value',\n        get: function get() {\n            return this._source;\n        }\n    }], [{\n        key: 'create',\n        value: function create() {\n            var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            return new Notation(object);\n        }\n\n        /**\n         *  Checks whether the given notation string is valid. Note that the star\n         *  (`*`) (which is a valid character, even if irregular) is NOT treated as\n         *  wildcard here. This checks for normal dot-notation, not a glob-notation.\n         *  For glob notation validation, use `Notation.Glob.isValid()` method. Same\n         *  goes for the negation character/prefix (`!`).\n         *\n         *  Note that, even though `obj['some.name']` is possible in JS, dot (`.`) is\n         *  always treated as a level (property) separator in Notation strings.\n         *\n         *  @param {String} notation - The notation string to be checked.\n         *\n         *  @returns {Boolean}\n         *\n         *  @example\n         *  Notation.isValid('prop1.prop2.prop3'); // true\n         *  Notation.isValid('prop1'); // true\n         *  Notation.isValid('prop.*'); // true (but star is not treated as wildcard)\n         *  Notation.isValid('@1'); // true (bec. obj['@1'] is possible in JS.)\n         *  Notation.isValid(null); // false\n         */\n\n    }, {\n        key: 'isValid',\n        value: function isValid(notation) {\n            return typeof notation === 'string' && /^[^\\s.!]+(\\.[^\\s.!]+)*$/.test(notation);\n        }\n\n        /**\n         *  Counts the number of notes/levels in the given notation.\n         *  @alias Notation.countLevels\n         *\n         *  @param {*} notation - The notation string to be processed.\n         *\n         *  @returns {Number}\n         */\n\n    }, {\n        key: 'countNotes',\n        value: function countNotes(notation) {\n            if (!Notation.isValid(notation)) {\n                throw new _notation4.default(ERR.NOTATION + '`' + notation + '`');\n            }\n            return notation.split('.').length + 1;\n        }\n        /**\n         *  Alias of `Notation.countNotes`.\n         *  @private\n         */\n\n    }, {\n        key: 'countLevels',\n        value: function countLevels(notation) {\n            return Notation.countNotes(notation);\n        }\n\n        /**\n         *  Gets the first (root) note of the notation string.\n         *\n         *  @param {String} notation - The notation string to be processed.\n         *\n         *  @returns {String}\n         *\n         *  @example\n         *  Notation.first('first.prop2.last'); // \"first\"\n         */\n\n    }, {\n        key: 'first',\n        value: function first(notation) {\n            if (!Notation.isValid(notation)) {\n                throw new _notation4.default(ERR.NOTATION + '`' + notation + '`');\n            }\n            // return notation.replace(/.*\\.([^\\.]*$)/, '$1');\n            return notation.split('.')[0];\n        }\n\n        /**\n         *  Gets the last note of the notation string.\n         *\n         *  @param {String} notation - The notation string to be processed.\n         *\n         *  @returns {String}\n         *\n         *  @example\n         *  Notation.last('first.prop2.last'); // \"last\"\n         */\n\n    }, {\n        key: 'last',\n        value: function last(notation) {\n            if (!Notation.isValid(notation)) {\n                throw new _notation4.default(ERR.NOTATION + '`' + notation + '`');\n            }\n            // return notation.replace(/.*\\.([^\\.]*$)/, '$1');\n            return notation.split('.').reverse()[0];\n        }\n\n        /**\n         *  Gets the parent notation (up to but excluding the last note)\n         *  from the notation string.\n         *\n         *  @param {String} notation - The notation string to be processed.\n         *\n         *  @returns {String}\n         *\n         *  @example\n         *  Notation.parent('first.prop2.last'); // \"first.prop2\"\n         *  Notation.parent('single'); // null\n         */\n\n    }, {\n        key: 'parent',\n        value: function parent(notation) {\n            if (!Notation.isValid(notation)) {\n                throw new _notation4.default(ERR.NOTATION + '`' + notation + '`');\n            }\n            return notation.indexOf('.') >= 0 ? notation.replace(/\\.[^.]*$/, '') : null;\n        }\n\n        /**\n         *  Iterates through each note/level of the given notation string.\n         *  @alias Notation.eachLevel\n         *\n         *  @param {String} notation - The notation string to be iterated through.\n         *  @param {Function} callback - The callback function to be invoked on\n         *  each iteration. To break out of the loop, return `false` from within the\n         *  callback.\n         *  Callback signature: `callback(levelNotation, note, index, list) { ... }`\n         *\n         *  @returns {void}\n         *\n         *  @example\n         *  const notation = 'first.prop2.last';\n         *  Notation.eachNote(notation, function (levelNotation, note, index, list) {\n         *      console.log(index, note, levelNotation);\n         *  });\n         *  // 0  \"first\"             \"first\"\n         *  // 1  \"first.prop2\"       \"prop2\"\n         *  // 2  \"first.prop2.last\"  \"last\"\n         */\n\n    }, {\n        key: 'eachNote',\n        value: function eachNote(notation, callback) {\n            if (!Notation.isValid(notation)) {\n                throw new _notation4.default(ERR.NOTATION + '`' + notation + '`');\n            }\n            var notes = notation.split('.'),\n                levelNotes = [],\n                levelNotation = void 0;\n            _utils2.default.each(notes, function (note, index, list) {\n                levelNotes.push(note);\n                levelNotation = levelNotes.join('.');\n                if (callback(levelNotation, note, index, notes) === false) return false;\n            }, Notation);\n        }\n        /**\n         *  Alias of `Notation.eachNote`.\n         *  @private\n         */\n\n    }, {\n        key: 'eachLevel',\n        value: function eachLevel(notation, callback) {\n            Notation.eachNote(notation, callback);\n        }\n    }]);\n\n    return Notation;\n}();\n\n/**\n *  Error class specific to `Notation`.\n *  @private\n *\n *  @class\n *  @see `{@link #Notation.Error}`\n */\n\n\nNotation.Error = _notation4.default;\n\n/**\n *  Utility for validating, comparing and sorting dot-notation globs.\n *  This is internally used by `Notation` class.\n *  @private\n *\n *  @class\n *  @see `{@link #Notation.Glob}`\n */\nNotation.Glob = _notation2.default;\n\n// --------------------------------\n// EXPORT\n// --------------------------------\n\nexports.default = Notation;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _utils = __webpack_require__(0);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _notation = __webpack_require__(1);\n\nvar _notation2 = _interopRequireDefault(_notation);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// http://www.linfo.org/wildcard.html\n// http://en.wikipedia.org/wiki/Glob_%28programming%29\n// http://en.wikipedia.org/wiki/Wildcard_character#Computing\n\n/**\n *  `Notation.Glob` is a utility for validating, comparing and sorting\n *  dot-notation globs.\n *\n *  You can use {@link http://www.linfo.org/wildcard.html|wildcard} stars `*`\n *  and negate the notation by prepending a bang `!`. A star will include all\n *  the properties at that level and a negated notation will be excluded.\n *  @name Notation.Glob\n *  @memberof! Notation\n *  @class\n *\n *  @example\n *  // for the following object;\n *  { name: 'John', billing: { account: { id: 1, active: true } } };\n *\n *  'billing.account.*'  // represents value `{ id: 1, active: true }`\n *  'billing.account.id' // represents value `1`\n *  '!billing.account.*' // represents value `{ name: 'John' }`\n *  'name' // represents `'John'`\n *  '*' // represents the whole object\n *\n *  @example\n *  var glob = new Notation.Glob('billing.account.*');\n *  glob.test('billing.account.id'); // true\n */\nvar NotationGlob = function () {\n\n    /**\n     *  Constructs a `Notation.Glob` object with the given glob string.\n     *  @constructs Notation.Glob\n     *\n     *  @param {String} glob - The glob string.\n     */\n    function NotationGlob(glob) {\n        _classCallCheck(this, NotationGlob);\n\n        if (!NotationGlob.isValid(glob)) {\n            throw new _notation2.default('Invalid notation glob: \"' + glob + '\"');\n        }\n\n        var ng = NotationGlob.inspect(glob);\n        this._ = {\n            glob: glob,\n            absGlob: ng.absGlob,\n            isNegated: ng.isNegated,\n            regexp: NotationGlob.toRegExp(ng.absGlob),\n            levels: ng.absGlob.split('.')\n        };\n    }\n\n    // --------------------------------\n    // NotationGlob Instance Properties\n    // --------------------------------\n\n    /**\n     *  Gets the original glob notation string.\n     *  @name Notation.Glob#glob\n     *  @type {String}\n     */\n\n\n    _createClass(NotationGlob, [{\n        key: 'test',\n\n\n        // --------------------------------\n        // NotationGlob Instance Methods\n        // --------------------------------\n\n        /**\n         *  Checks whether the given notation value matches the source notation glob.\n         *  @name Notation.Glob#test\n         *  @function\n         *\n         *  @param {String} notation - The notation string to be tested.\n         *\n         *  @returns {Boolean}\n         *\n         *  @example\n         *  const glob = new Notation.Glob('!prop.*.name');\n         *  glob.test(\"prop.account.name\"); // true\n         */\n        value: function test(notation) {\n            // we allow '*' to match everything. We check for this here\n            // instead of the regexp bec. we care for dots (.) within the glob.\n            return this.absGlob === '*' || this.absGlob !== '' && notation !== '' && this.regexp.test(notation);\n        }\n\n        // --------------------------------\n        // NotationGlob Static Members\n        // --------------------------------\n\n        /**\n         *  Basically constructs a new `NotationGlob` instance\n         *  with the given glob string.\n         *  @name Notation.Glob.create\n         *  @function\n         *\n         *  @param {String} glob - The source notation glob.\n         *\n         *  @returns {NotationGlob}\n         *\n         *  @example\n         *  const glob = Notation.Glob.create(strGlob);\n         *  // equivalent to:\n         *  const glob = new Notation.Glob(strGlob);\n         */\n\n    }, {\n        key: 'glob',\n        get: function get() {\n            return this._.glob;\n        }\n\n        /**\n         *  Gets the absolute glob notation (without the preceeding bang `!`).\n         *  @name Notation.Glob#absGlob\n         *  @type {String}\n         */\n\n    }, {\n        key: 'absGlob',\n        get: function get() {\n            return this._.absGlob;\n        }\n\n        /**\n         *  Specifies whether this glob is negated with a `!` prefix.\n         *  @name Notation.Glob#isNegated\n         *  @type {Boolean}\n         */\n\n    }, {\n        key: 'isNegated',\n        get: function get() {\n            return this._.isNegated;\n        }\n\n        /**\n         *  Represents this glob in regular expressions.\n         *  Note that the negation (`!`) is ignored, if any.\n         *  @name Notation.Glob#regexp\n         *  @type {RegExp}\n         */\n\n    }, {\n        key: 'regexp',\n        get: function get() {\n            return this._.regexp;\n        }\n\n        /**\n         *  List of notes/levels of this glob notation.\n         *  @name Notation.Glob#notes\n         *  @alias Notation.Glob#levels\n         *  @type {Array}\n         */\n\n    }, {\n        key: 'notes',\n        get: function get() {\n            return this._.levels;\n        }\n        /**\n         *  Alias of `Notation.Glob#notes`.\n         *  @private\n         */\n\n    }, {\n        key: 'levels',\n        get: function get() {\n            return this._.levels;\n        }\n    }], [{\n        key: 'create',\n        value: function create(glob) {\n            return new NotationGlob(glob);\n        }\n\n        /**\n         *  Gets a regular expressions instance from the given glob notation.\n         *  Note that the bang `!` prefix will be ignored if the given glob is negated.\n         *  @name Notation.Glob.toRegExp\n         *  @function\n         *\n         *  @param {String} glob - Glob notation to be converted.\n         *\n         *  @returns {RegExp}\n         */\n\n    }, {\n        key: 'toRegExp',\n        value: function toRegExp(glob) {\n            if (glob.indexOf('!') === 0) glob = glob.slice(1);\n            // Modified from http://stackoverflow.com/a/13818704/112731\n            glob = _utils2.default.pregQuote(glob).replace(/\\\\\\*/g, '[^\\\\s\\\\.]*').replace(/\\\\\\?/g, '.');\n            return new RegExp('^' + glob);\n            // we don't end it with a $ so the ending is open `company.*` will\n            // produce `/^company\\.[^\\s\\.]*/` which will match both `company.name`\n            // and `company.address.street` but will not match `some.company.name`\n        }\n\n        /**\n         *  @private\n         */\n\n    }, {\n        key: 'inspect',\n        value: function inspect(glob) {\n            var bang = glob.slice(0, 1) === '!';\n            glob = bang ? glob.slice(1) : glob;\n            return {\n                absGlob: glob,\n                isNegated: bang\n            };\n        }\n\n        // Created test at: https://regex101.com/r/tJ7yI9/4\n        /**\n         *  Validates the given notation glob.\n         *  @name Notation.Glob.isValid\n         *  @function\n         *\n         *  @param {String} glob - Notation glob to be validated.\n         *  @returns {Boolean}\n         */\n\n    }, {\n        key: 'isValid',\n        value: function isValid(glob) {\n            return typeof glob === 'string' && /^(!?([^\\s.!*]+|\\*)(\\.([^\\s.!*]+|\\*))*)$/.test(glob);\n        }\n\n        /**\n         *  Compares two given notation globs and returns an integer value as a\n         *  result. This is generally used to sort glob arrays. Loose globs (with\n         *  stars especially closer to beginning of the glob string) and globs\n         *  representing the parent/root of the compared property glob come first.\n         *  Verbose/detailed/exact globs come last. (`* < *abc < abc`).\n         *\n         *  For instance; `store.address` comes before `store.address.street`. So\n         *  this works both for `*, store.address.street, !store.address` and `*,\n         *  store.address, !store.address.street`. For cases such as `prop.id` vs\n         *  `!prop.id` which represent the same property; the negated glob wins\n         *  (comes last).\n         *  @name Notation.Glob.compare\n         *  @function\n         *\n         *  @param {String} a - First notation glob to be compared.\n         *  @param {String} b - Second notation glob to be compared.\n         *\n         *  @returns {Number} - Returns `-1` if `a` comes first, `1` if `b` comes\n         *  first and `0` if equivalent priority.\n         *\n         *  @example\n         *  let result = Notation.Glob.compare('prop.*.name', 'prop.*');\n         *  console.log(result); // 1\n         */\n\n    }, {\n        key: 'compare',\n        value: function compare(a, b) {\n            // trivial case, both are exactly the same!\n            if (a === b) return 0;\n            var levelsA = a.split('.'),\n                levelsB = b.split('.');\n            // Check depth (number of levels)\n            if (levelsA.length === levelsB.length) {\n                // count wildcards (assuming more wildcards comes first)\n                var wild = /(?:^|\\.)\\*(?:$|\\.)/g,\n                    mA = a.match(wild),\n                    mB = b.match(wild),\n                    wildA = mA ? mA.length : 0,\n                    wildB = mB ? mB.length : 0;\n                if (wildA === wildB) {\n                    // check for negation\n                    var negA = a.indexOf('!') === 0,\n                        negB = b.indexOf('!') === 0;\n                    if (negA === negB) {\n                        // both are negated or neither are, just return alphabetical\n                        return a < b ? -1 : 1;\n                    }\n                    // compare without the negatation\n                    var nonNegA = negA ? a.slice(1) : a,\n                        nonNegB = negB ? b.slice(1) : b;\n                    if (nonNegA === nonNegB) {\n                        return negA ? 1 : -1;\n                    }\n                    return nonNegA < nonNegB ? -1 : 1;\n                }\n                return wildA > wildB ? -1 : 1;\n            }\n\n            return levelsA.length < levelsB.length ? -1 : 1;\n        }\n\n        /**\n         *  Sorts the notation globs in the given array by their priorities. Loose\n         *  globs (with stars especially closer to beginning of the glob string);\n         *  globs representing the parent/root of the compared property glob come\n         *  first. Verbose/detailed/exact globs come last. (`* < *abc < abc`).\n         *\n         *  For instance; `store.address` comes before `store.address.street`. For\n         *  cases such as `prop.id` vs `!prop.id` which represent the same property;\n         *  the negated glob wins (comes last).\n         *  @name Notation.Glob.sort\n         *  @function\n         *\n         *  @param {Array} globsArray - The notation globs array to be sorted. The\n         *  passed array reference is modified.\n         *\n         *  @returns {Array}\n         *\n         *  @example\n         *  const globs = ['!prop.*.name', 'prop.*', 'prop.id'];\n         *  const sorted = Notation.Glob.sort(globs);\n         *  console.log(sorted);\n         *  // ['prop.*', 'prop.id', '!prop.*.name'];\n         */\n\n    }, {\n        key: 'sort',\n        value: function sort(globsArray) {\n            return globsArray.sort(NotationGlob.compare);\n            // return _mergeSortArray(globsArray, NotationGlob.compare);\n        }\n\n        /**\n         *  Normalizes the given notation globs array by removing unnecessary,\n         *  redundant items and returns a priority-sorted globs array.\n         *\n         *  <ul>\n         *  <li>If any exact duplicates found, all except first is removed.</li>\n         *  <li>If both normal and negated versions of a glob are found, negated wins.\n         *  <br />example: `['id', '!id']` normalizes to `['!id']`.</li>\n         *  <li>If a glob is covered by another, it's removed.\n         *  <br />example: `['car.*', 'car.model']` normalizes to `['car.*']`.</li>\n         *  <li>If a glob is covered by another negated glob, it's kept.\n         *  <br />example: `['!car.*', 'car.model']` normalizes as is.</li>\n         *  <li>If a negated glob is covered by another glob, it's also kept.\n         *  <br />example: `['car.*', '!car.model']` normalizes as is.</li>\n         *  </ul>\n         *  @name Notation.Glob.normalize\n         *  @function\n         *\n         *  @param {Array} globsArray - Notation globs array to be normalized.\n         *\n         *  @returns {Array}\n         *\n         *  @example\n         *  const globs = ['*', '!id', 'name', 'car.model', '!car.*', 'id', 'name', 'age'];\n         *  const normalized = Notation.Glob.normalize(globs);\n         *  console.log(normalized);\n         *  // ['*', '!id', 'car.model', '!car.*']\n         */\n\n    }, {\n        key: 'normalize',\n        value: function normalize(globsArray) {\n            // e.g. ['*', '!id', 'name', 'car.model', '!car.*', 'id', 'name']\n            // =>   ['*', '!id', 'car.model', '!car.*']\n            globsArray = _utils2.default.ensureArray(globsArray).map(function (item) {\n                return item.trim();\n            });\n            globsArray = NotationGlob.sort(globsArray);\n            _utils2.default.eachRight(globsArray, function (glob, index) {\n                // remove duplicates\n                var indexOfDuplicate = globsArray.indexOf(glob);\n                if (indexOfDuplicate >= 0 && indexOfDuplicate !== index) {\n                    globsArray.splice(index, 1); // remove current index (at the end)\n                    return; // no break\n                }\n\n                //   ['*', '!id', 'name', 'car.model', '!car.*', 'id', 'name']\n                // » ['*', '!id', '!car.*', 'car.model']\n\n                // negated globs will not be removed\n                if (glob.indexOf('!') === 0) return; // no break\n\n                // inspect/compare the current glob with the rest of the array\n                _utils2.default.eachRight(globsArray, function (globToCheck, i) {\n                    // don't inspect glob with itself\n                    if (i === index) return; // no break\n\n                    var ins = NotationGlob.inspect(globToCheck);\n                    // console.log(glob, 'vs', ins);\n                    var re = NotationGlob.toRegExp(ins.absGlob);\n                    // checked item matches/covers current, non-negated glob, so...\n                    if (re.test(glob)) {\n                        // we'll remove the current, non-negated glob if;\n                        // - checked item IS negated and exactly the same as current\n                        //   glob (in other words, reverse of it)\n                        // - checked item IS NOT negated, but it covers the current\n                        //   glob\n                        if (!ins.isNegated || glob === ins.absGlob) {\n                            globsArray.splice(index, 1);\n                        }\n                        return false; // break\n                    }\n                });\n            });\n\n            // since negated wins in the same array, ['*', '!*'] is already reduced\n            // to ['!*'] so we can safely remove !* if found, since it's redundant.\n            // e.g. ['!*', 'name'] => ['name']\n            var i = globsArray.indexOf('!*');\n            if (i >= 0) globsArray.splice(i, 1);\n\n            return globsArray;\n        }\n\n        /**\n         *  Gets the union from the given couple of glob arrays and returns\n         *  a new array of globs.\n         *  <ul>\n         *  <li>If the exact same element is found in both\n         *  arrays, one of them is removed to prevent duplicates.\n         *  <br />example: `['!id', 'name'] ∪ ['!id']` unites to `['!id', 'name']`</li>\n         *  <li>If any non-negated item is covered by a glob in the same\n         *  or other array, the redundant item is removed.\n         *  <br />example: `['*', 'name'] ∪ ['email']` unites to `['*']`</li>\n         *  <li>If one of the arrays contains a negated equivalent of an\n         *  item in the other array, the negated item is removed.\n         *  <br />example: `['!id'] ∪ ['id']` unites to `['id']`</li>\n         *  <li>If any item covers/matches a negated item in the other array,\n         *  the negated item is removed.\n         *  <br />example #1: `['!user.id'] ∪ ['user.*']` unites to `['user.*']`\n         *  <br />example #2: `['*'] ∪ ['!password']` unites to `['*']`\n         *  </li>\n         *  <li>So on... For a better understanding read the inline code\n         *  documentation.</li>\n         *  </ul>\n         *  @name Notation.Glob.union\n         *  @function\n         *\n         *  @param {Array} globsA - First array of glob strings.\n         *  @param {Array} globsB - Second array of glob strings.\n         *\n         *  @returns {Array}\n         *\n         *  @example\n         *  const a = ['foo.bar', 'bar.baz', '!*.qux'];\n         *  const b = ['!foo.bar', 'bar.qux', 'bar.baz'];\n         *  const union = Notation.Glob.union(a, b);\n         *  console.log(union);\n         *  // ['!*.qux', 'foo.bar', 'bar.baz', 'bar.qux']\n         */\n\n    }, {\n        key: 'union',\n        value: function union(globsA, globsB) {\n            // NOTE: The logic here is quite complex. For making this easier to\n            // understand; below code is written a bit verbose. Do not modify this\n            // only to make it shorter. This will already get minified.\n\n            // -----------------------\n\n            // if any of the arrays has a single glob item of only a wildcard (e.g.\n            // `['*']`); this covers all, so...\n            if (_utils2.default.hasSingleItemOf(globsA, '*') || _utils2.default.hasSingleItemOf(globsB, '*')) {\n                return ['*'];\n            }\n\n            // clone arrays so we don't mutate the originals.\n            var arrA = globsA.concat(); // NotationGlob.normalize(globsA.concat());\n            var arrB = globsB.concat(); // NotationGlob.normalize(globsB.concat());\n            // no need to normalize. we'll do it at the end.\n\n            var reA = void 0,\n                reB = void 0,\n                insA = void 0,\n                insB = void 0;\n\n            // storage for tracking (winner) negated globs that are compared with\n            // another negated in the other array. For example:\n            // ['*', '!user.*'] ∪ ['*', '!user.id']\n            // '!user.id' should be kept in the union when compared with '!user.*'.\n            // but later, '!user.id' will be unioned with '*' in the other array\n            // which will cover and remove '!user.id'. so we'll keep a storage for\n            // to prevent this.\n            var keepNegated = [];\n\n            // iterate through array A\n            _utils2.default.eachRight(arrA, function (a, aIndex) {\n                insA = NotationGlob.inspect(a);\n                reA = NotationGlob.toRegExp(insA.absGlob);\n\n                // iterate through array B for each item in A\n                _utils2.default.eachRight(arrB, function (b, bIndex) {\n                    insB = NotationGlob.inspect(b);\n                    reB = NotationGlob.toRegExp(insB.absGlob);\n\n                    // console.log(a, 'vs', b);\n\n                    if (insA.isNegated && !insB.isNegated) {\n                        // if we have the non-negated version of the same glob in B,\n                        // we'll remove item in A. In union, non-negated wins\n                        // (unlike normalize — in normalize, negated wins within the\n                        // same array).\n                        if (insA.absGlob === insB.absGlob) {\n                            arrA.splice(aIndex, 1);\n                            // console.log(`${a} removed: ${a} reverses ${b}`);\n                            // console.log(arrA, '∪', arrB);\n                            return false; // break from B\n                        }\n\n                        // remove the negated from A only if the same value is not in B.\n                        // e.g. 1)  ['!x.y'] ∪ ['x.*'] => ['x.*']\n                        // e.g. 2)  ['!x.y'] ∪ ['x.*', '!x.y'] => ['x.*', '!x.y']\n                        if (reB.test(insA.absGlob) && arrB.indexOf(a) === -1 && keepNegated.indexOf(a) === -1) {\n                            arrA.splice(aIndex, 1);\n                            // console.log(`${a} removed: ${b} covers ${a}`);\n                            // console.log(arrA, '∪', arrB);\n                            return false; // break from B\n                        }\n                    }\n\n                    if (!insA.isNegated && insB.isNegated) {\n                        // if we have the non-negated version of the same glob in A,\n                        // we'll remove item in B.\n                        if (insA.absGlob === insB.absGlob) {\n                            arrB.splice(bIndex, 1);\n                            // console.log(`${b} removed: ${b} reverses ${a}`);\n                            // console.log(arrA, '∪', arrB);\n                            return; // move to next in B\n                        }\n\n                        // remove the negated from B only if the same value is not in A.\n                        // e.g. 1)  ['!x.y'] ∪ ['x.*'] => ['x.*']\n                        // e.g. 2)  ['!x.y'] ∪ ['x.*', '!x.y'] => ['x.*', '!x.y']\n                        if (reA.test(insB.absGlob) && arrA.indexOf(b) === -1 && keepNegated.indexOf(b) === -1) {\n                            arrB.splice(bIndex, 1);\n                            // console.log(`${b} removed: ${a} covers ${b}`);\n                            // console.log(arrA, '∪', arrB);\n                            return; // move to next in B\n                        }\n                    }\n\n                    if (insA.isNegated && insB.isNegated) {\n                        // if both A and B are negated and NOT equal, we'll check\n                        // for coverage over one or the other.\n                        if (a !== b) {\n                            // if B covers A, we'll remove from B.\n                            // e.g. '!user.*' covers '!user.id'\n                            if (reB.test(insA.absGlob)) {\n                                arrB.splice(bIndex, 1);\n                                keepNegated.push(a);\n                                // console.log(`${b} removed: ${a} neg-covers ${b}`);\n                                // console.log(arrA, '∪', arrB);\n                                return; // move to next in B\n                            }\n                            // if A covers B, we'll remove from A.\n                            if (reA.test(insB.absGlob)) {\n                                arrA.splice(aIndex, 1);\n                                keepNegated.push(b);\n                                // console.log(`${a} removed: ${b} neg-covers ${a}`);\n                                // console.log(arrA, '∪', arrB);\n                                return false; // break from B\n                            }\n                        }\n                        // else, if they are equal, we'll not remove any bec. it\n                        // means both arrays disalow that glob.\n                    }\n\n                    if (!insA.isNegated && !insB.isNegated) {\n                        // if both A and B are NOT negated and equal, we'll remove\n                        // from A.\n                        if (a === b) {\n                            arrA.splice(aIndex, 1);\n                            // console.log(`${a} removed: ${a} === ${b}`);\n                            // console.log(arrA, '∪', arrB);\n                            return false;\n                        }\n\n                        // else -> (a !== b)\n\n                        // Leave the rest to the normalizing process\n                        // (Notation.Glob.normalize) bec. when both A and B are\n                        // non-negated, the one which is covered by the other will\n                        // be removed incorrectly.\n\n                        // For example:\n                        // ['!x.y'] ∪ ['x.*'] => ['x.*']\n                        // ['*', '!x.*'] ∪ ['*', '!x.*', 'x.o']\n                        // '*' in A will cover and remove 'x.o' in B incorrectly bec.\n                        // 'x.o' is a remainder from '!x.*' which is both in A and B.\n\n                        // So when this is left as is; the final union before\n                        // normalizing is: ['*', '!x.*', '*', 'x.o']\n                        // normalized to:  ['*', '!x.*', 'x.o']\n\n                        // if (reB.test(insA.absGlob)) {\n                        //     arrA.splice(aIndex, 1);\n                        //     console.log(`${a} removed: ${b} covers ${a}`);\n                        //     console.log(arrA, '∪', arrB);\n                        //     return false;\n                        // }\n                        // if (reA.test(insB.absGlob)) {\n                        //     arrB.splice(bIndex, 1);\n                        //     console.log(`${b} removed: ${a} covers ${b}`);\n                        //     console.log(arrA, '∪', arrB);\n                        //     return;\n                        // }\n                    }\n                });\n            });\n\n            // concat both arrays, normalize and sort so we get a nice union array.\n            var result = arrA.concat(arrB);\n            // console.log('-->', result);\n            return NotationGlob.normalize(result);\n        }\n    }]);\n\n    return NotationGlob;\n}();\n\nexports.default = NotationGlob;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// notation.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"lib/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f9c8d1090dad90f27bcf","\nlet toString = Object.prototype.toString;\n\nconst utils = {\n\n    isObject(o) {\n        return toString.call(o) === '[object Object]';\n    },\n\n    isArray(o) {\n        return toString.call(o) === '[object Array]';\n    },\n\n    ensureArray(o) {\n        if (utils.isArray(o)) return o;\n        return o === null || o === undefined ? [] : [o];\n    },\n\n    hasOwn(o, prop) {\n        return o && typeof o.hasOwnProperty === 'function' && o.hasOwnProperty(prop);\n    },\n\n    deepCopy(object) {\n        if (!utils.isObject(object)) return object;\n        var k, o,\n            copy = {};\n        for (k in object) {\n            if (utils.hasOwn(object, k)) {\n                o = object[k];\n                copy[k] = utils.isObject(o) ? utils.deepCopy(o) : o;\n            }\n        }\n        return copy;\n    },\n\n    // iterates over elements of an array, executing the callback for each\n    // element.\n    each(array, callback, thisArg) {\n        var length = array.length,\n            index = -1;\n        while (++index < length) {\n            if (callback.call(thisArg, array[index], index, array) === false) break;\n        }\n    },\n\n    eachRight(array, callback) {\n        var index = array.length;\n        while (index--) {\n            if (callback(array[index], index, array) === false) break;\n        }\n    },\n\n    // Borrowed from http://phpjs.org/functions/preg_quote\n    pregQuote(str, delimiter) {\n        return String(str)\n            .replace(new RegExp('[.\\\\\\\\+*?\\\\[\\\\^\\\\]$(){}=!<>|:\\\\' + (delimiter || '') + '-]', 'g'), '\\\\$&');\n    },\n\n    stringOrArrayOf(o, value) {\n        return (typeof o === 'string' && o === value)\n            || (utils.isArray(o) && o.length === 1 && o[0] === value);\n    },\n\n    hasSingleItemOf(arr, itemValue) {\n        return arr.length === 1\n            && (arguments.length === 2 ? arr[0] === itemValue : true);\n    }\n\n};\n\nexport default utils;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js","\n// TODO: instanceof return false.\n\n/**\n *  Error class specific to `Notation`.\n *  @name Notation.Error\n *  @memberof! Notation\n *  @class\n *\n */\nclass NotationError extends Error {\n\n    /**\n     *  Initializes a new `Notation.Error` instance.\n     *  @constructs Notation.Error\n     *  @param {String} message - The error message.\n     */\n    constructor(message = '') {\n        super(message);\n        this.name = this.constructor.name;\n\n        Object.defineProperty(this, 'name', {\n            enumerable: false,\n            writable: false,\n            value: 'NotationError'\n        });\n\n        Object.defineProperty(this, 'message', {\n            enumerable: false,\n            writable: true,\n            value: message\n        });\n\n        if (Error.hasOwnProperty('captureStackTrace')) { // V8\n            Error.captureStackTrace(this, this.constructor);\n        } else {\n            Object.defineProperty(this, 'stack', {\n                enumerable: false,\n                writable: false,\n                value: (new Error(message)).stack\n            });\n        }\n    }\n}\n\nexport default NotationError;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/notation.error.js","import Notation from './core/Notation';\n// export default Notation;\n// http://stackoverflow.com/a/33683495/112731\nmodule.exports = Notation;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import utils from '../utils';\nimport NotationGlob from './notation.glob';\nimport NotationError from './notation.error';\n\nconst ERR = {\n    SOURCE: 'Invalid source object.',\n    DEST: 'Invalid destination object.',\n    NOTATION: 'Invalid notation: ',\n    NOTA_OBJ: 'Invalid notations object: '\n};\n\n/**\n *  Notation.js for Node and Browser.\n *\n *  Like in most programming languages, JavaScript makes use of dot-notation to\n *  access the value of a member of an object (or class). `Notation` class\n *  provides various methods for modifying / processing the contents of the\n *  given object; by parsing object notation strings or globs.\n *\n *  Note that this class will only deal with enumerable properties of the source\n *  object; so it should be used to manipulate data objects. It will not deal\n *  with preserving the prototype-chain of the given object.\n *\n *  @author   Onur Yıldırım <onur@cutepilot.com>\n *  @license  MIT\n */\nclass Notation {\n\n    /**\n     *  Initializes a new instance of `Notation`.\n     *\n     *  @param {Object} [object={}] - The source object to be notated.\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Dodge\", model: \"Charger\", year: 1970 } };\n     *  const notation = new Notation(obj);\n     *  notation.get('car.model'); // \"Charger\"\n     */\n    constructor(object = {}) {\n        // if defined, it should be an object.\n        if (!utils.isObject(object)) {\n            throw new NotationError(ERR.SOURCE);\n        }\n        this._source = object;\n    }\n\n    // --------------------------------\n    // Notation Instance Properties\n    // --------------------------------\n\n    /**\n     *  Gets the value of the source object.\n     *  @type {Object}\n     *\n     *  @example\n     *  const person = { name: \"Onur\" };\n     *  const me = Notation.create(person)\n     *      .set(\"age\", 36)\n     *      .set(\"car.brand\", \"Ford\")\n     *      .set(\"car.model\", \"Mustang\")\n     *      .value;\n     *  console.log(me); // { name: \"Onur\", age: 36, car: { brand: \"Ford\", model: \"Mustang\" } }\n     *  console.log(person === me); // true\n     */\n    get value() {\n        return this._source;\n    }\n\n    // --------------------------------\n    // Notation Instance Methods\n    // --------------------------------\n\n    /**\n     *  Recursively iterates through each key of the source object and invokes\n     *  the given callback function with parameters, on each non-object value.\n     *  @alias Notation#eachKey\n     *\n     *  @param {Function} callback - The callback function to be invoked on\n     *  each on each non-object value. To break out of the loop, return `false`\n     *  from within the callback.\n     *  Callback signature: `callback(notation, key, value, object) { ... }`\n     *\n     *  @returns {void}\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Dodge\", model: \"Charger\", year: 1970 } };\n     *  Notation.create(obj).each(function (notation, key, value, object) {\n     *      console.log(notation, value);\n     *  });\n     *  // \"car.brand\"  \"Dodge\"\n     *  // \"car.model\"  \"Charger\"\n     *  // \"car.year\"  1970\n     */\n    each(callback) {\n        let o = this._source,\n            keys = Object.keys(o);\n        utils.each(keys, (key, index, list) => {\n            // this is preserved in arrow functions\n            let prop = o[key],\n                N;\n            if (utils.isObject(prop)) {\n                N = new Notation(prop);\n                N.each((notation, nKey, value, prop) => {\n                    let subKey = key + '.' + notation;\n                    callback.call(N, subKey, nKey, value, o);\n                });\n            } else {\n                callback.call(this, key, key, prop, o);\n            }\n        });\n    }\n    /**\n     *  Alias for `#each`\n     *  @private\n     */\n    eachKey(callback) {\n        return this.each(callback);\n    }\n\n    /**\n     *  Iterates through each note of the given notation string by evaluating\n     *  it on the source object.\n     *\n     *  @param {String} notation - The notation string to be iterated through.\n     *  @param {Function} callback - The callback function to be invoked on\n     *  each iteration. To break out of the loop, return `false` from within\n     *  the callback.\n     *  Callback signature: `callback(levelValue, note, index, list) { ... }`\n     *\n     *  @returns {void}\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Dodge\", model: \"Charger\", year: 1970 } };\n     *  Notation.create(obj)\n     *      .eachValue(\"car.brand\", function (levelValue, note, index, list) {\n     *          console.log(note, levelValue); // \"car.brand\" \"Dodge\"\n     *      });\n     */\n    eachValue(notation, callback) {\n        if (!Notation.isValid(notation)) {\n            throw new NotationError(ERR.NOTATION + '`' + notation + '`');\n        }\n        var level = this._source;\n        Notation.eachNote(notation, (levelNotation, note, index, list) => {\n            level = utils.hasOwn(level, note) ? level[note] : undefined;\n            if (callback(level, levelNotation, note, index, list) === false) return false;\n\n        });\n    }\n\n    /**\n     *  Gets the list of notations from the source object (keys).\n     *\n     *  @returns {Array} - An array of notation strings.\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Dodge\", model: \"Charger\", year: 1970 } };\n     *  const notations = Notation.create(obj).getNotations();\n     *  console.log(notations); // [ \"car.brand\", \"car.model\", \"car.year\" ]\n     */\n    getNotations() {\n        let list = [];\n        this.each((notation, key, value, obj) => {\n            list.push(notation);\n        });\n        return list;\n    }\n\n    /**\n     *  Flattens the source object to a single-level object with notated keys.\n     *\n     *  @returns {Notation} - Returns the current `Notation` instance (self).\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Dodge\", model: \"Charger\", year: 1970 } };\n     *  const flat = Notation.create(obj).flatten().value;\n     *  console.log(flat);\n     *  // { \"car.brand\": \"Dodge\", \"car.model\": \"Charger\", \"car.year\": 1970 }\n     */\n    flatten() {\n        let o = {};\n        this.each((notation, key, value, obj) => {\n            o[notation] = value;\n        });\n        // return o;\n        this._source = o;\n        return this;\n    }\n\n    /**\n     *  Aggregates notated keys of a (single-level) object, and nests them under\n     *  their corresponding properties. This is the opposite of `Notation#flatten`\n     *  method. This might be useful when expanding a flat object fetched from\n     *  a database.\n     *  @alias Notation#aggregate\n     *  @chainable\n     *\n     *  @returns {Notation} - Returns the current `Notation` instance (self).\n     *\n     *  @example\n     *  const obj = { \"car.brand\": \"Dodge\", \"car.model\": \"Charger\", \"car.year\": 1970 }\n     *  const expanded = Notation.create(obj).expand().value;\n     *  console.log(expanded); // { car: { brand: \"Dodge\", model: \"Charger\", year: 1970 } };\n     */\n    expand() {\n        this._source = Notation.create({}).merge(this._source).value;\n        return this;\n    }\n    /**\n     *  Alias for `#expand`\n     *  @private\n     */\n    aggregate() {\n        return this.expand();\n    }\n\n    /**\n     *  Inspects the given notation on the source object by checking\n     *  if the source object actually has the notated property;\n     *  and getting its value if exists.\n     *\n     *  @param {String} notation - The notation string to be inspected.\n     *\n     *  @returns {InspectResult} - The result object.\n     *\n     *  @example\n     *  Notation.create({ car: { year: 1970 } }).inspect(\"car.year\");\n     *  // { has: true, value: 1970 }\n     *  Notation.create({ car: { year: 1970 } }).inspect(\"car.color\");\n     *  // { has: false, value: undefined }\n     *  Notation.create({ car: { color: undefined } }).inspect(\"car.color\");\n     *  // { has: true, value: undefined }\n     */\n    inspect(notation) {\n        if (!Notation.isValid(notation)) {\n            throw new NotationError(ERR.NOTATION + '`' + notation + '`');\n        }\n        let level = this._source,\n            result = { has: false, value: undefined };\n        Notation.eachNote(notation, (levelNotation, note, index, list) => {\n            if (utils.hasOwn(level, note)) {\n                level = level[note];\n                result = { has: true, value: level };\n            } else {\n                // level = undefined;\n                result = { has: false, value: undefined };\n                return false; // break out\n            }\n        });\n        return result;\n    }\n    /**\n     *  Notation inspection result object.\n     *  @typedef Notation~InspectResult\n     *  @type Object\n     *  @property {Boolean} has - Indicates whether the source object has the given\n     *  notation as a (leveled) enumerable property. If the property exists but has\n     *  a value of `undefined`, this will still return `true`.\n     *  @property {*} value - The value of the notated property. If the source object\n     *  does not have the notation, the value will be `undefined`.\n     */\n\n    /**\n     *  Inspects and removes the given notation from the source object\n     *  by checking if the source object actually has the notated property;\n     *  and getting its value if exists, before removing the property.\n     *\n     *  @param {String} notation - The notation string to be inspected.\n     *\n     *  @returns {InspectResult} - The result object.\n     *\n     *  @example\n     *  const obj = { name: \"John\", car: { year: 1970 } };\n     *  Notation.create(obj).inspectRemove(\"car.year\"); // { has: true, value: 1970 }\n     *  // obj » { name: \"John\", car: {} }\n     *  Notation.create(obj).inspectRemove(\"car.year\", true); // { has: true, value: 1970 }\n     *  // obj » { name: \"John\" }\n     *  Notation.create({ car: { year: 1970 } }).inspectRemove(\"car.color\");\n     *  // { has: false, value: undefined }\n     *  Notation.create({ car: { color: undefined } }).inspectRemove(\"car.color\");\n     *  // { has: true, value: undefined }\n     */\n    inspectRemove(notation) {\n        if (!Notation.isValid(notation)) {\n            throw new NotationError(ERR.NOTATION + '`' + notation + '`');\n        }\n        let o, lastNote;\n        if (notation.indexOf('.') < 0) {\n            lastNote = notation;\n            o = this._source;\n        } else {\n            let upToLast = Notation.parent(notation);\n            lastNote = Notation.last(notation);\n            o = this.inspect(upToLast).value;\n        }\n        let result;\n        if (utils.hasOwn(o, lastNote)) {\n            result = { has: true, value: o[lastNote] };\n            delete o[lastNote];\n        } else {\n            result = { has: false, value: undefined };\n        }\n\n        return result;\n    }\n\n    /**\n     *  Checks whether the source object has the given notation\n     *  as a (leveled) enumerable property. If the property exists\n     *  but has a value of `undefined`, this will still return `true`.\n     *\n     *  @param {String} notation - The notation string to be checked.\n     *\n     *  @returns {Boolean}\n     *\n     *  @example\n     *  Notation.create({ car: { year: 1970 } }).has(\"car.year\"); // true\n     *  Notation.create({ car: { year: undefined } }).has(\"car.year\"); // true\n     *  Notation.create({}).has(\"car.color\"); // false\n     */\n    has(notation) {\n        return this.inspect(notation).has;\n    }\n\n    /**\n     *  Checks whether the source object has the given notation\n     *  as a (leveled) defined enumerable property. If the property\n     *  exists but has a value of `undefined`, this will return `false`.\n     *\n     *  @param {String} notation - The notation string to be checked.\n     *\n     *  @returns {Boolean}\n     *\n     *  @example\n     *  Notation.create({ car: { year: 1970 } }).hasDefined(\"car.year\"); // true\n     *  Notation.create({ car: { year: undefined } }).hasDefined(\"car.year\"); // false\n     *  Notation.create({}).hasDefined(\"car.color\"); // false\n     */\n    hasDefined(notation) {\n        return this.inspect(notation).value !== undefined;\n    }\n\n    /**\n     *  Gets the value of the corresponding property at the given\n     *  notation.\n     *\n     *  @param {String} notation - The notation string to be processed.\n     *  @param {String} [defaultValue] - The default value to be returned if\n     *  the property is not found or enumerable.\n     *\n     *  @returns {*} - The value of the notated property.\n     *\n     *  @example\n     *  Notation.create({ car: { brand: \"Dodge\" } }).get(\"car.brand\"); // \"Dodge\"\n     *  Notation.create({ car: {} }).get(\"car.model\"); // undefined\n     *  Notation.create({ car: {} }).get(\"car.model\", \"Challenger\"); // \"Challenger\"\n     *  Notation.create({ car: { model: undefined } }).get(\"car.model\", \"Challenger\"); // undefined\n     */\n    get(notation, defaultValue) {\n        let result = this.inspect(notation);\n        return !result.has ? defaultValue : result.value;\n    }\n\n    /**\n     *  Sets the value of the corresponding property at the given\n     *  notation. If the property does not exist, it will be created\n     *  and nested at the calculated level. If it exists; its value\n     *  will be overwritten by default.\n     *  @chainable\n     *\n     *  @param {String} notation - The notation string to be processed.\n     *  @param {*} value - The value to be set for the notated property.\n     *  @param {Boolean} [overwrite=true] - Whether to overwrite the property\n     *  if exists.\n     *\n     *  @returns {Notation} - Returns the current `Notation` instance (self).\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Dodge\", year: 1970 } };\n     *  Notation.create(obj)\n     *      .set(\"car.brand\", \"Ford\")\n     *      .set(\"car.model\", \"Mustang\")\n     *      .set(\"car.year\", 1965, false)\n     *      .set(\"car.color\", \"red\")\n     *      .set(\"boat\", \"none\");\n     *  console.log(obj);\n     *  // { notebook: \"Mac\", car: { brand: \"Ford\", model: \"Mustang\", year: 1970, color: \"red\" }, boat: \"none\" };\n     */\n    set(notation, value, overwrite = true) {\n        if (!Notation.isValid(notation)) {\n            throw new NotationError(ERR.NOTATION + '`' + notation + '`');\n        }\n        let level = this._source,\n            last;\n        Notation.eachNote(notation, (levelNotation, note, index, list) => {\n            last = index === list.length - 1;\n            // check if the property is at this level\n            if (utils.hasOwn(level, note)) {\n                // check if we're at the last level\n                if (last) {\n                    // if overwrite is set, assign the value.\n                    if (overwrite) level[note] = value;\n                } else {\n                    // if not, just re-reference the current level.\n                    level = level[note];\n                }\n            } else {\n                // we don't have this property at this level\n                // so; if this is the last level, we set the value\n                // if not, we set an empty object for the next level\n                level = level[note] = (last ? value : {});\n            }\n        });\n        return this;\n    }\n\n    /**\n     *  Just like the `.set()` method but instead of a single notation\n     *  string, an object of notations and values can be passed.\n     *  Sets the value of each corresponding property at the given\n     *  notation. If a property does not exist, it will be created\n     *  and nested at the calculated level. If it exists; its value\n     *  will be overwritten by default.\n     *  @chainable\n     *\n     *  @param {Object} notationsObject - The notations object to be processed.\n     *  This can either be a regular object with non-dotted keys\n     *  (which will be merged to the first/root level of the source object);\n     *  or a flattened object with notated (dotted) keys.\n     *  @param {Boolean} [overwrite=true] - Whether to overwrite a property if\n     *  exists.\n     *\n     *  @returns {Notation} - Returns the current `Notation` instance (self).\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Dodge\", year: 1970 } };\n     *  Notation.create(obj).merge({\n     *      \"car.brand\": \"Ford\",\n     *      \"car.model\": \"Mustang\",\n     *      \"car.year\": 1965,\n     *      \"car.color\": \"red\",\n     *      \"boat\": \"none\"\n     *  });\n     *  console.log(obj);\n     *  // { car: { brand: \"Ford\", model: \"Mustang\", year: 1970, color: \"red\" }, boat: \"none\" };\n     */\n    merge(notationsObject, overwrite = true) {\n        if (!utils.isObject(notationsObject)) {\n            throw new NotationError(ERR.NOTA_OBJ + '`' + notationsObject + '`');\n        }\n        let value;\n        utils.each(Object.keys(notationsObject), (notation, index, obj) => {\n            // this is preserved in arrow functions\n            value = notationsObject[notation];\n            this.set(notation, value, overwrite);\n        });\n        return this;\n    }\n\n    /**\n     *  Removes the properties by the given list of notations from the source\n     *  object and returns a new object with the removed properties.\n     *  Opposite of `merge()` method.\n     *\n     *  @param {Array} notations - The notations array to be processed.\n     *\n     *  @returns {Object} - An object with the removed properties.\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Dodge\", year: 1970 }, notebook: \"Mac\" };\n     *  const separated = Notation.create(obj).separate([\"car.brand\", \"boat\" ]);\n     *  console.log(separated);\n     *  // { notebook: \"Mac\", car: { brand: \"Ford\" } };\n     *  console.log(obj);\n     *  // { car: { year: 1970 } };\n     */\n    separate(notations) {\n        if (!utils.isArray(notations)) {\n            throw new NotationError(ERR.NOTA_OBJ + '`' + notations + '`');\n        }\n        let o = new Notation({});\n        utils.each(notations, (notation, index, obj) => {\n            let result = this.inspectRemove(notation);\n            o.set(notation, result.value);\n        });\n        this._source = o._source;\n        return this;\n    }\n\n    /**\n     *  Deep clones the source object while filtering its properties\n     *  by the given glob notations. Includes all matched properties\n     *  and removes the rest.\n     *\n     *  @param {Array|String} globNotations - The glob notation(s) to\n     *  be processed. The difference between normal notations and\n     *  glob-notations is that you can use wildcard stars (*) and\n     *  negate the notation by prepending a bang (!). A negated\n     *  notation will be excluded. Order of the globs do not matter,\n     *  they will be logically sorted. Loose globs will be processed\n     *  first and verbose globs or normal notations will be processed\n     *  last. e.g. `[ \"car.model\", \"*\", \"!car.*\" ]` will be sorted as\n     *  `[ \"*\", \"!car.*\", \"car.model\" ]`.\n     *  Passing no parameters or passing an empty string (`\"\"` or `[\"\"]`)\n     *  will empty the source object.\n     *  @chainable\n     *\n     *  @returns {Notation} - Returns the current `Notation` instance (self).\n     *\n     *  @example\n     *  const obj = { notebook: \"Mac\", car: { brand: \"Ford\", model: \"Mustang\", year: 1970, color: \"red\" } };\n     *  const notation = Notation.create(obj);\n     *  notation.filter([ \"*\", \"!car.*\", \"car.model\" ]);\n     *  console.log(obj);       // { notebook: \"Mac\", car: { model: \"Mustang\" } }\n     *  notation.filter(\"*\");   // re-filtering the current contents\n     *  console.log(obj);       // { notebook: \"Mac\", car: { model: \"Mustang\" } }\n     *  notation.filter();      // or notation.filter(\"\");\n     *  console.log(obj);       // {}\n     */\n    filter(globNotations) {\n        let original = this.value;\n        let copy = utils.deepCopy(original);\n\n        // ensure array, normalize and sort the globs in logical order. we also\n        // concat the array first (to prevent mutating the original) bec. we'll\n        // change it's content via `.shift()`\n        let globs = NotationGlob.normalize(globNotations).concat();\n\n        // if globs only consist of \"*\"; set the \"copy\" as source and return.\n        if (utils.stringOrArrayOf(globs, '*')) {\n            this._source = copy;\n            return this;\n        }\n        // if globs is \"\" or [\"\"] set source to `{}` and return.\n        if (arguments.length === 0\n                || utils.stringOrArrayOf(globs, '')\n                || utils.stringOrArrayOf(globs, '!*')) {\n            this._source = {};\n            return this;\n        }\n\n        let filtered;\n        // if the first item of sorted globs is \"*\" we set the source to the\n        // (full) \"copy\" and remove the \"*\" from globs (not to re-process).\n        if (globs[0] === '*') {\n            filtered = new Notation(copy);\n            globs.shift();\n        } else {\n            // otherwise we set an empty object as the source so that we can\n            // add notations/properties to it.\n            filtered = new Notation({});\n        }\n\n        let g, endStar, normalized;\n        // iterate through globs\n        utils.each(globs, (globNotation, index, array) => {\n            // console.log('--->', globNotation);\n            g = new NotationGlob(globNotation);\n            // set flag that indicates whether the glob ends with `.*`\n            endStar = g.absGlob.slice(-2) === '.*';\n            // get the remaining part as the (extra) normalized glob\n            normalized = endStar ? g.absGlob.slice(0, -2) : g.absGlob;\n            // normalized = endStar ? g.absGlob.replace(/(\\.\\*)+$/, '') : g.absGlob;\n            // check if normalized glob has no wildcard stars e.g. \"a.b\" or\n            // \"!a.b.c\" etc..\n            if (normalized.indexOf('*') < 0) {\n                if (g.isNegated) {\n                    // directly remove the notation if negated\n                    filtered.remove(normalized);\n                    // if original glob had `.*` at the end, it means remove\n                    // contents (not itself). so we'll set an empty object.\n                    // meaning `some.prop` (prop) is removed completely but\n                    // `some.prop.*` (prop) results in `{}`.\n                    if (endStar) filtered.set(normalized, {}, true);\n                } else {\n                    // directly copy the same notation from the original\n                    filtered.copyFrom(original, normalized, null, true);\n                }\n                // move to the next\n                return true;\n            }\n            // if glob has wildcard star(s), we'll iterate through keys of the\n            // source object and see if (full) notation of each key matches\n            // the current glob.\n\n            // TODO: Optimize the loop below. Instead of checking each key's\n            // notation, get the non-star left part of the glob and iterate\n            // that property of the source object.\n            this.each((originalNotation, key, value, obj) => {\n                // console.log('>>', originalNotation);\n\n                // iterating each note of original notation. i.e.:\n                // note1.note2.note3 is iterated from left to right, as:\n                // 'note1', 'note1.note2', 'note1.note2.note3' — in order.\n                Notation.eachNote(originalNotation, (levelNotation, note, index, list) => {\n                    if (g.test(levelNotation)) {\n                        if (g.isNegated) {\n                            // console.log('removing', levelNotation, 'of', originalNotation);\n                            filtered.remove(levelNotation);\n                            // we break and return early if removed bec. deeper\n                            // level props are also removed with this parent.\n                            // e.g. when 'note1.note2' of 'note1.note2.note3' is\n                            // removed, we no more have 'note3'.\n                            return false;\n                        }\n                        filtered.set(levelNotation, value, true);\n                    }\n                });\n            });\n        });\n        // finally set the filtered's value as the source of our instance and\n        // return.\n        this._source = filtered.value;\n        return this;\n    }\n\n    /**\n     *  Removes the property from the source object, at the given notation.\n     *  @alias Notation#delete\n     *  @chainable\n     *\n     *  @param {String} notation - The notation to be inspected.\n     *\n     *  @returns {Notation} - Returns the current `Notation` instance (self).\n     *\n     *  @example\n     *  const obj = { notebook: \"Mac\", car: { model: \"Mustang\" } };\n     *  Notation.create(obj).remove(\"car.model\");\n     *  console.log(obj); // { notebook: \"Mac\", car: { } }\n     */\n    remove(notation) {\n        this.inspectRemove(notation);\n        return this;\n    }\n    /**\n     *  Alias of `Notation#remove`\n     *  @private\n     */\n    delete(notation) {\n        this.remove(notation);\n        return this;\n    }\n\n    /**\n     *  Clones the `Notation` instance to a new one.\n     *\n     *  @returns {Notation} - A new copy of the instance.\n     */\n    clone() {\n        let o = utils.deepCopy(this.value);\n        return new Notation(o);\n    }\n\n    /**\n     *  Copies the notated property from the source object and adds it to the\n     *  destination — only if the source object actually has that property.\n     *  This is different than a property with a value of `undefined`.\n     *  @chainable\n     *\n     *  @param {Object} destination - The destination object that the notated\n     *  properties will be copied to.\n     *  @param {String} notation - The notation to get the corresponding property\n     *  from the source object.\n     *  @param {String} [newNotation=null] - The notation to set the source property\n     *  on the destination object. In other words, the copied property will be\n     *  renamed to this value before set on the destination object. If not set,\n     *  `notation` argument will be used.\n     *  @param {Boolean} [overwrite=true] - Whether to overwrite the property on\n     *  the destination object if it exists.\n     *\n     *  @returns {Notation} - Returns the current `Notation` instance (self).\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Ford\", model: \"Mustang\" } };\n     *  const models = { dodge: \"Charger\" };\n     *  Notation.create(obj).copyTo(models, \"car.model\", \"ford\");\n     *  console.log(models);\n     *  // { dodge: \"Charger\", ford: \"Mustang\" }\n     *  // source object (obj) is not modified\n     */\n    copyTo(destination, notation, newNotation = null, overwrite = true) {\n        if (!utils.isObject(destination)) throw new NotationError(ERR.DEST);\n        let result = this.inspect(notation);\n        if (result.has) {\n            new Notation(destination).set(newNotation || notation, result.value, overwrite);\n        }\n        return this;\n    }\n\n    /**\n     *  Copies the notated property from the destination object and adds it to the\n     *  source object — only if the destination object actually has that property.\n     *  This is different than a property with a value of `undefined`.\n     *  @chainable\n     *\n     *  @param {Object} destination - The destination object that the notated\n     *  properties will be copied from.\n     *  @param {String} notation - The notation to get the corresponding property\n     *  from the destination object.\n     *  @param {String} [newNotation=null] - The notation to set the destination\n     *  property on the source object. In other words, the copied property\n     *  will be renamed to this value before set on the source object.\n     *  If not set, `notation` argument will be used.\n     *  @param {Boolean} [overwrite=true] - Whether to overwrite the property\n     *  on the source object if it exists.\n     *\n     *  @returns {Notation} - Returns the current `Notation` instance (self).\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Ford\", model: \"Mustang\" } };\n     *  const models = { dodge: \"Charger\" };\n     *  Notation.create(obj).copyFrom(models, \"dodge\", \"car.model\", true);\n     *  console.log(obj);\n     *  // { car: { brand: \"Ford\", model: \"Charger\" } }\n     *  // models object is not modified\n     */\n    copyFrom(destination, notation, newNotation = null, overwrite = true) {\n        if (!utils.isObject(destination)) throw new NotationError(ERR.DEST);\n        let result = new Notation(destination).inspect(notation);\n        if (result.has) {\n            this.set(newNotation || notation, result.value, overwrite);\n        }\n        return this;\n    }\n\n    /**\n     *  Removes the notated property from the source object and adds it to the\n     *  destination — only if the source object actually has that property.\n     *  This is different than a property with a value of `undefined`.\n     *  @chainable\n     *\n     *  @param {Object} destination - The destination object that the notated\n     *  properties will be moved to.\n     *  @param {String} notation - The notation to get the corresponding\n     *  property from the source object.\n     *  @param {String} [newNotation=null] - The notation to set the source property\n     *  on the destination object. In other words, the moved property will be\n     *  renamed to this value before set on the destination object. If not set,\n     *  `notation` argument will be used.\n     *  @param {Boolean} [overwrite=true] - Whether to overwrite the property on\n     *  the destination object if it exists.\n     *\n     *  @returns {Notation} - Returns the current `Notation` instance (self).\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Ford\", model: \"Mustang\" } };\n     *  const models = { dodge: \"Charger\" };\n     *  Notation.create(obj).moveTo(models, \"car.model\", \"ford\");\n     *  console.log(obj);\n     *  // { car: { brand: \"Ford\" } }\n     *  console.log(models);\n     *  // { dodge: \"Charger\", ford: \"Mustang\" }\n     */\n    moveTo(destination, notation, newNotation = null, overwrite = true) {\n        if (!utils.isObject(destination)) throw new NotationError(ERR.DEST);\n        let result = this.inspectRemove(notation);\n        if (result.has) {\n            new Notation(destination).set(newNotation || notation, result.value, overwrite);\n        }\n        return this;\n    }\n\n    /**\n     *  Removes the notated property from the destination object and adds it to the\n     *  source object — only if the destination object actually has that property.\n     *  This is different than a property with a value of `undefined`.\n     *  @chainable\n     *\n     *  @param {Object} destination - The destination object that the notated\n     *  properties will be moved from.\n     *  @param {String} notation - The notation to get the corresponding property\n     *  from the destination object.\n     *  @param {String} [newNotation=null] - The notation to set the destination\n     *  property on the source object. In other words, the moved property\n     *  will be renamed to this value before set on the source object.\n     *  If not set, `notation` argument will be used.\n     *  @param {Boolean} [overwrite=true] - Whether to overwrite the property on\n     *  the source object if it exists.\n     *\n     *  @returns {Notation} - Returns the current `Notation` instance (self).\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Ford\", model: \"Mustang\" } };\n     *  const models = { dodge: \"Charger\" };\n     *  Notation.create(obj).moveFrom(models, \"dodge\", \"car.model\", true);\n     *  console.log(obj);\n     *  // { car: { brand: \"Ford\", model: \"Charger\" } }\n     *  console.log(models);\n     *  // {}\n     */\n    moveFrom(destination, notation, newNotation = null, overwrite = true) {\n        if (!utils.isObject(destination)) throw new NotationError(ERR.DEST);\n        let result = new Notation(destination).inspectRemove(notation);\n        if (result.has) {\n            this.set(newNotation || notation, result.value, overwrite);\n        }\n        return this;\n    }\n\n    /**\n     *  Renames the notated property of the source object by the new notation.\n     *  @alias Notation#renote\n     *  @chainable\n     *\n     *  @param {String} notation - The notation to get the corresponding\n     *  property (value) from the source object.\n     *  @param {String} newNotation - The new notation for the targeted\n     *  property value. If not set, the source object will not be modified.\n     *  @param {Boolean} [overwrite=true] - Whether to overwrite the property at\n     *  the new notation, if it exists.\n     *\n     *  @returns {Notation} - Returns the current `Notation` instance (self).\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Ford\", model: \"Mustang\" } };\n     *  Notation.create(obj)\n     *      .rename(\"car.brand\", \"carBrand\")\n     *      .rename(\"car.model\", \"carModel\");\n     *  console.log(obj);\n     *  // { carBrand: \"Ford\", carModel: \"Mustang\" }\n     */\n    rename(notation, newNotation, overwrite) {\n        if (!newNotation) return this;\n        return this.moveTo(this._source, notation, newNotation, overwrite);\n    }\n    /**\n     *  Alias for `#rename`\n     *  @private\n     */\n    renote(notation, newNotation, overwrite) {\n        return this.rename(notation, newNotation, overwrite);\n    }\n\n    /**\n     *  Extracts the property at the given notation to a new object by copying\n     *  it from the source object. This is equivalent to `.copyTo({}, notation, newNotation)`.\n     *  @alias Notation#copyToNew\n     *\n     *  @param {String} notation - The notation to get the corresponding\n     *  property (value) from the source object.\n     *  @param {String} newNotation - The new notation to be set on the new\n     *  object for the targeted property value. If not set, `notation` argument\n     *  will be used.\n     *\n     *  @returns {Object} - Returns a new object with the notated property.\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Ford\", model: \"Mustang\" } };\n     *  const extracted = Notation.create(obj).extract(\"car.brand\", \"carBrand\");\n     *  console.log(extracted);\n     *  // { carBrand: \"Ford\" }\n     *  // obj is not modified\n     */\n    extract(notation, newNotation) {\n        let o = {};\n        this.copyTo(o, notation, newNotation);\n        return o;\n    }\n    /**\n     *  Alias for `#extract`\n     *  @private\n     */\n    copyToNew(notation, newNotation) {\n        return this.extract(notation, newNotation);\n    }\n\n    /**\n     *  Extrudes the property at the given notation to a new object by moving\n     *  it from the source object. This is equivalent to `.moveTo({}, notation, newNotation)`.\n     *  @alias Notation#moveToNew\n     *\n     *  @param {String} notation - The notation to get the corresponding\n     *  property (value) from the source object.\n     *  @param {String} newNotation - The new notation to be set on the new\n     *  object for the targeted property value. If not set, `notation` argument\n     *  will be used.\n     *\n     *  @returns {Object} - Returns a new object with the notated property.\n     *\n     *  @example\n     *  const obj = { car: { brand: \"Ford\", model: \"Mustang\" } };\n     *  const extruded = Notation.create(obj).extrude(\"car.brand\", \"carBrand\");\n     *  console.log(obj);\n     *  // { car: { model: \"Mustang\" } }\n     *  console.log(extruded);\n     *  // { carBrand: \"Ford\" }\n     */\n    extrude(notation, newNotation) {\n        let o = {};\n        this.moveTo(o, notation, newNotation);\n        return o;\n    }\n    /**\n     *  Alias for `#extrude`\n     *  @private\n     */\n    moveToNew(notation, newNotation) {\n        return this.extrude(notation, newNotation);\n    }\n\n    // --------------------------------\n    // Notation Static Methods\n    // --------------------------------\n\n    /**\n     *  Basically constructs a new `Notation` instance with the given object.\n     *  @chainable\n     *\n     *  @param {Object} [object={}] - The object to be notated.\n     *\n     *  @returns {Notation} - The created instance.\n     *\n     *  @example\n     *  const notation = Notation.create(obj);\n     *  // equivalent to:\n     *  const notation = new Notation(obj);\n     */\n    static create(object = {}) {\n        return new Notation(object);\n    }\n\n    /**\n     *  Checks whether the given notation string is valid. Note that the star\n     *  (`*`) (which is a valid character, even if irregular) is NOT treated as\n     *  wildcard here. This checks for normal dot-notation, not a glob-notation.\n     *  For glob notation validation, use `Notation.Glob.isValid()` method. Same\n     *  goes for the negation character/prefix (`!`).\n     *\n     *  Note that, even though `obj['some.name']` is possible in JS, dot (`.`) is\n     *  always treated as a level (property) separator in Notation strings.\n     *\n     *  @param {String} notation - The notation string to be checked.\n     *\n     *  @returns {Boolean}\n     *\n     *  @example\n     *  Notation.isValid('prop1.prop2.prop3'); // true\n     *  Notation.isValid('prop1'); // true\n     *  Notation.isValid('prop.*'); // true (but star is not treated as wildcard)\n     *  Notation.isValid('@1'); // true (bec. obj['@1'] is possible in JS.)\n     *  Notation.isValid(null); // false\n     */\n    static isValid(notation) {\n        return (typeof notation === 'string') &&\n            (/^[^\\s.!]+(\\.[^\\s.!]+)*$/).test(notation);\n    }\n\n    /**\n     *  Counts the number of notes/levels in the given notation.\n     *  @alias Notation.countLevels\n     *\n     *  @param {*} notation - The notation string to be processed.\n     *\n     *  @returns {Number}\n     */\n    static countNotes(notation) {\n        if (!Notation.isValid(notation)) {\n            throw new NotationError(ERR.NOTATION + '`' + notation + '`');\n        }\n        return notation.split('.').length + 1;\n    }\n    /**\n     *  Alias of `Notation.countNotes`.\n     *  @private\n     */\n    static countLevels(notation) {\n        return Notation.countNotes(notation);\n    }\n\n    /**\n     *  Gets the first (root) note of the notation string.\n     *\n     *  @param {String} notation - The notation string to be processed.\n     *\n     *  @returns {String}\n     *\n     *  @example\n     *  Notation.first('first.prop2.last'); // \"first\"\n     */\n    static first(notation) {\n        if (!Notation.isValid(notation)) {\n            throw new NotationError(ERR.NOTATION + '`' + notation + '`');\n        }\n        // return notation.replace(/.*\\.([^\\.]*$)/, '$1');\n        return notation.split('.')[0];\n    }\n\n    /**\n     *  Gets the last note of the notation string.\n     *\n     *  @param {String} notation - The notation string to be processed.\n     *\n     *  @returns {String}\n     *\n     *  @example\n     *  Notation.last('first.prop2.last'); // \"last\"\n     */\n    static last(notation) {\n        if (!Notation.isValid(notation)) {\n            throw new NotationError(ERR.NOTATION + '`' + notation + '`');\n        }\n        // return notation.replace(/.*\\.([^\\.]*$)/, '$1');\n        return notation.split('.').reverse()[0];\n    }\n\n    /**\n     *  Gets the parent notation (up to but excluding the last note)\n     *  from the notation string.\n     *\n     *  @param {String} notation - The notation string to be processed.\n     *\n     *  @returns {String}\n     *\n     *  @example\n     *  Notation.parent('first.prop2.last'); // \"first.prop2\"\n     *  Notation.parent('single'); // null\n     */\n    static parent(notation) {\n        if (!Notation.isValid(notation)) {\n            throw new NotationError(ERR.NOTATION + '`' + notation + '`');\n        }\n        return notation.indexOf('.') >= 0\n            ? notation.replace(/\\.[^.]*$/, '')\n            : null;\n    }\n\n    /**\n     *  Iterates through each note/level of the given notation string.\n     *  @alias Notation.eachLevel\n     *\n     *  @param {String} notation - The notation string to be iterated through.\n     *  @param {Function} callback - The callback function to be invoked on\n     *  each iteration. To break out of the loop, return `false` from within the\n     *  callback.\n     *  Callback signature: `callback(levelNotation, note, index, list) { ... }`\n     *\n     *  @returns {void}\n     *\n     *  @example\n     *  const notation = 'first.prop2.last';\n     *  Notation.eachNote(notation, function (levelNotation, note, index, list) {\n     *      console.log(index, note, levelNotation);\n     *  });\n     *  // 0  \"first\"             \"first\"\n     *  // 1  \"first.prop2\"       \"prop2\"\n     *  // 2  \"first.prop2.last\"  \"last\"\n     */\n    static eachNote(notation, callback) {\n        if (!Notation.isValid(notation)) {\n            throw new NotationError(ERR.NOTATION + '`' + notation + '`');\n        }\n        let notes = notation.split('.'),\n            levelNotes = [],\n            levelNotation;\n        utils.each(notes, (note, index, list) => {\n            levelNotes.push(note);\n            levelNotation = levelNotes.join('.');\n            if (callback(levelNotation, note, index, notes) === false) return false;\n        }, Notation);\n    }\n    /**\n     *  Alias of `Notation.eachNote`.\n     *  @private\n     */\n    static eachLevel(notation, callback) {\n        Notation.eachNote(notation, callback);\n    }\n\n}\n\n/**\n *  Error class specific to `Notation`.\n *  @private\n *\n *  @class\n *  @see `{@link #Notation.Error}`\n */\nNotation.Error = NotationError;\n\n/**\n *  Utility for validating, comparing and sorting dot-notation globs.\n *  This is internally used by `Notation` class.\n *  @private\n *\n *  @class\n *  @see `{@link #Notation.Glob}`\n */\nNotation.Glob = NotationGlob;\n\n// --------------------------------\n// EXPORT\n// --------------------------------\n\nexport default Notation;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Notation.js","import utils from '../utils';\nimport NotationError from './notation.error';\n\n// http://www.linfo.org/wildcard.html\n// http://en.wikipedia.org/wiki/Glob_%28programming%29\n// http://en.wikipedia.org/wiki/Wildcard_character#Computing\n\n/**\n *  `Notation.Glob` is a utility for validating, comparing and sorting\n *  dot-notation globs.\n *\n *  You can use {@link http://www.linfo.org/wildcard.html|wildcard} stars `*`\n *  and negate the notation by prepending a bang `!`. A star will include all\n *  the properties at that level and a negated notation will be excluded.\n *  @name Notation.Glob\n *  @memberof! Notation\n *  @class\n *\n *  @example\n *  // for the following object;\n *  { name: 'John', billing: { account: { id: 1, active: true } } };\n *\n *  'billing.account.*'  // represents value `{ id: 1, active: true }`\n *  'billing.account.id' // represents value `1`\n *  '!billing.account.*' // represents value `{ name: 'John' }`\n *  'name' // represents `'John'`\n *  '*' // represents the whole object\n *\n *  @example\n *  var glob = new Notation.Glob('billing.account.*');\n *  glob.test('billing.account.id'); // true\n */\nclass NotationGlob {\n\n    /**\n     *  Constructs a `Notation.Glob` object with the given glob string.\n     *  @constructs Notation.Glob\n     *\n     *  @param {String} glob - The glob string.\n     */\n    constructor(glob) {\n        if (!NotationGlob.isValid(glob)) {\n            throw new NotationError('Invalid notation glob: \"' + glob + '\"');\n        }\n\n        let ng = NotationGlob.inspect(glob);\n        this._ = {\n            glob,\n            absGlob: ng.absGlob,\n            isNegated: ng.isNegated,\n            regexp: NotationGlob.toRegExp(ng.absGlob),\n            levels: ng.absGlob.split('.')\n        };\n    }\n\n    // --------------------------------\n    // NotationGlob Instance Properties\n    // --------------------------------\n\n    /**\n     *  Gets the original glob notation string.\n     *  @name Notation.Glob#glob\n     *  @type {String}\n     */\n    get glob() {\n        return this._.glob;\n    }\n\n    /**\n     *  Gets the absolute glob notation (without the preceeding bang `!`).\n     *  @name Notation.Glob#absGlob\n     *  @type {String}\n     */\n    get absGlob() {\n        return this._.absGlob;\n    }\n\n    /**\n     *  Specifies whether this glob is negated with a `!` prefix.\n     *  @name Notation.Glob#isNegated\n     *  @type {Boolean}\n     */\n    get isNegated() {\n        return this._.isNegated;\n    }\n\n    /**\n     *  Represents this glob in regular expressions.\n     *  Note that the negation (`!`) is ignored, if any.\n     *  @name Notation.Glob#regexp\n     *  @type {RegExp}\n     */\n    get regexp() {\n        return this._.regexp;\n    }\n\n    /**\n     *  List of notes/levels of this glob notation.\n     *  @name Notation.Glob#notes\n     *  @alias Notation.Glob#levels\n     *  @type {Array}\n     */\n    get notes() {\n        return this._.levels;\n    }\n    /**\n     *  Alias of `Notation.Glob#notes`.\n     *  @private\n     */\n    get levels() {\n        return this._.levels;\n    }\n\n    // --------------------------------\n    // NotationGlob Instance Methods\n    // --------------------------------\n\n    /**\n     *  Checks whether the given notation value matches the source notation glob.\n     *  @name Notation.Glob#test\n     *  @function\n     *\n     *  @param {String} notation - The notation string to be tested.\n     *\n     *  @returns {Boolean}\n     *\n     *  @example\n     *  const glob = new Notation.Glob('!prop.*.name');\n     *  glob.test(\"prop.account.name\"); // true\n     */\n    test(notation) {\n        // we allow '*' to match everything. We check for this here\n        // instead of the regexp bec. we care for dots (.) within the glob.\n        return this.absGlob === '*'\n            || (this.absGlob !== '' && notation !== '' && this.regexp.test(notation));\n    }\n\n    // --------------------------------\n    // NotationGlob Static Members\n    // --------------------------------\n\n    /**\n     *  Basically constructs a new `NotationGlob` instance\n     *  with the given glob string.\n     *  @name Notation.Glob.create\n     *  @function\n     *\n     *  @param {String} glob - The source notation glob.\n     *\n     *  @returns {NotationGlob}\n     *\n     *  @example\n     *  const glob = Notation.Glob.create(strGlob);\n     *  // equivalent to:\n     *  const glob = new Notation.Glob(strGlob);\n     */\n    static create(glob) {\n        return new NotationGlob(glob);\n    }\n\n    /**\n     *  Gets a regular expressions instance from the given glob notation.\n     *  Note that the bang `!` prefix will be ignored if the given glob is negated.\n     *  @name Notation.Glob.toRegExp\n     *  @function\n     *\n     *  @param {String} glob - Glob notation to be converted.\n     *\n     *  @returns {RegExp}\n     */\n    static toRegExp(glob) {\n        if (glob.indexOf('!') === 0) glob = glob.slice(1);\n        // Modified from http://stackoverflow.com/a/13818704/112731\n        glob = utils.pregQuote(glob).replace(/\\\\\\*/g, '[^\\\\s\\\\.]*').replace(/\\\\\\?/g, '.');\n        return new RegExp('^' + glob);\n        // we don't end it with a $ so the ending is open `company.*` will\n        // produce `/^company\\.[^\\s\\.]*/` which will match both `company.name`\n        // and `company.address.street` but will not match `some.company.name`\n    }\n\n    /**\n     *  @private\n     */\n    static inspect(glob) {\n        let bang = glob.slice(0, 1) === '!';\n        glob = bang ? glob.slice(1) : glob;\n        return {\n            absGlob: glob,\n            isNegated: bang\n        };\n    }\n\n    // Created test at: https://regex101.com/r/tJ7yI9/4\n    /**\n     *  Validates the given notation glob.\n     *  @name Notation.Glob.isValid\n     *  @function\n     *\n     *  @param {String} glob - Notation glob to be validated.\n     *  @returns {Boolean}\n     */\n    static isValid(glob) {\n        return (typeof glob === 'string')\n            && (/^(!?([^\\s.!*]+|\\*)(\\.([^\\s.!*]+|\\*))*)$/).test(glob);\n    }\n\n    /**\n     *  Compares two given notation globs and returns an integer value as a\n     *  result. This is generally used to sort glob arrays. Loose globs (with\n     *  stars especially closer to beginning of the glob string) and globs\n     *  representing the parent/root of the compared property glob come first.\n     *  Verbose/detailed/exact globs come last. (`* < *abc < abc`).\n     *\n     *  For instance; `store.address` comes before `store.address.street`. So\n     *  this works both for `*, store.address.street, !store.address` and `*,\n     *  store.address, !store.address.street`. For cases such as `prop.id` vs\n     *  `!prop.id` which represent the same property; the negated glob wins\n     *  (comes last).\n     *  @name Notation.Glob.compare\n     *  @function\n     *\n     *  @param {String} a - First notation glob to be compared.\n     *  @param {String} b - Second notation glob to be compared.\n     *\n     *  @returns {Number} - Returns `-1` if `a` comes first, `1` if `b` comes\n     *  first and `0` if equivalent priority.\n     *\n     *  @example\n     *  let result = Notation.Glob.compare('prop.*.name', 'prop.*');\n     *  console.log(result); // 1\n     */\n    static compare(a, b) {\n        // trivial case, both are exactly the same!\n        if (a === b) return 0;\n        let levelsA = a.split('.'),\n            levelsB = b.split('.');\n        // Check depth (number of levels)\n        if (levelsA.length === levelsB.length) {\n            // count wildcards (assuming more wildcards comes first)\n            let wild = /(?:^|\\.)\\*(?:$|\\.)/g,\n                mA = a.match(wild),\n                mB = b.match(wild),\n                wildA = mA ? mA.length : 0,\n                wildB = mB ? mB.length : 0;\n            if (wildA === wildB) {\n                // check for negation\n                let negA = a.indexOf('!') === 0,\n                    negB = b.indexOf('!') === 0;\n                if (negA === negB) {\n                    // both are negated or neither are, just return alphabetical\n                    return a < b ? -1 : 1;\n                }\n                // compare without the negatation\n                let nonNegA = negA ? a.slice(1) : a,\n                    nonNegB = negB ? b.slice(1) : b;\n                if (nonNegA === nonNegB) {\n                    return negA ? 1 : -1;\n                }\n                return nonNegA < nonNegB ? -1 : 1;\n            }\n            return wildA > wildB ? -1 : 1;\n        }\n\n        return levelsA.length < levelsB.length ? -1 : 1;\n    }\n\n    /**\n     *  Sorts the notation globs in the given array by their priorities. Loose\n     *  globs (with stars especially closer to beginning of the glob string);\n     *  globs representing the parent/root of the compared property glob come\n     *  first. Verbose/detailed/exact globs come last. (`* < *abc < abc`).\n     *\n     *  For instance; `store.address` comes before `store.address.street`. For\n     *  cases such as `prop.id` vs `!prop.id` which represent the same property;\n     *  the negated glob wins (comes last).\n     *  @name Notation.Glob.sort\n     *  @function\n     *\n     *  @param {Array} globsArray - The notation globs array to be sorted. The\n     *  passed array reference is modified.\n     *\n     *  @returns {Array}\n     *\n     *  @example\n     *  const globs = ['!prop.*.name', 'prop.*', 'prop.id'];\n     *  const sorted = Notation.Glob.sort(globs);\n     *  console.log(sorted);\n     *  // ['prop.*', 'prop.id', '!prop.*.name'];\n     */\n    static sort(globsArray) {\n        return globsArray.sort(NotationGlob.compare);\n        // return _mergeSortArray(globsArray, NotationGlob.compare);\n    }\n\n    /**\n     *  Normalizes the given notation globs array by removing unnecessary,\n     *  redundant items and returns a priority-sorted globs array.\n     *\n     *  <ul>\n     *  <li>If any exact duplicates found, all except first is removed.</li>\n     *  <li>If both normal and negated versions of a glob are found, negated wins.\n     *  <br />example: `['id', '!id']` normalizes to `['!id']`.</li>\n     *  <li>If a glob is covered by another, it's removed.\n     *  <br />example: `['car.*', 'car.model']` normalizes to `['car.*']`.</li>\n     *  <li>If a glob is covered by another negated glob, it's kept.\n     *  <br />example: `['!car.*', 'car.model']` normalizes as is.</li>\n     *  <li>If a negated glob is covered by another glob, it's also kept.\n     *  <br />example: `['car.*', '!car.model']` normalizes as is.</li>\n     *  </ul>\n     *  @name Notation.Glob.normalize\n     *  @function\n     *\n     *  @param {Array} globsArray - Notation globs array to be normalized.\n     *\n     *  @returns {Array}\n     *\n     *  @example\n     *  const globs = ['*', '!id', 'name', 'car.model', '!car.*', 'id', 'name', 'age'];\n     *  const normalized = Notation.Glob.normalize(globs);\n     *  console.log(normalized);\n     *  // ['*', '!id', 'car.model', '!car.*']\n     */\n    static normalize(globsArray) {\n        // e.g. ['*', '!id', 'name', 'car.model', '!car.*', 'id', 'name']\n        // =>   ['*', '!id', 'car.model', '!car.*']\n        globsArray = utils.ensureArray(globsArray).map(item => item.trim());\n        globsArray = NotationGlob.sort(globsArray);\n        utils.eachRight(globsArray, (glob, index) => {\n            // remove duplicates\n            let indexOfDuplicate = globsArray.indexOf(glob);\n            if (indexOfDuplicate >= 0 && indexOfDuplicate !== index) {\n                globsArray.splice(index, 1); // remove current index (at the end)\n                return; // no break\n            }\n\n            //   ['*', '!id', 'name', 'car.model', '!car.*', 'id', 'name']\n            // » ['*', '!id', '!car.*', 'car.model']\n\n            // negated globs will not be removed\n            if (glob.indexOf('!') === 0) return; // no break\n\n            // inspect/compare the current glob with the rest of the array\n            utils.eachRight(globsArray, (globToCheck, i) => {\n                // don't inspect glob with itself\n                if (i === index) return; // no break\n\n                let ins = NotationGlob.inspect(globToCheck);\n                // console.log(glob, 'vs', ins);\n                let re = NotationGlob.toRegExp(ins.absGlob);\n                // checked item matches/covers current, non-negated glob, so...\n                if (re.test(glob)) {\n                    // we'll remove the current, non-negated glob if;\n                    // - checked item IS negated and exactly the same as current\n                    //   glob (in other words, reverse of it)\n                    // - checked item IS NOT negated, but it covers the current\n                    //   glob\n                    if (!ins.isNegated || glob === ins.absGlob) {\n                        globsArray.splice(index, 1);\n                    }\n                    return false; // break\n                }\n            });\n        });\n\n        // since negated wins in the same array, ['*', '!*'] is already reduced\n        // to ['!*'] so we can safely remove !* if found, since it's redundant.\n        // e.g. ['!*', 'name'] => ['name']\n        let i = globsArray.indexOf('!*');\n        if (i >= 0) globsArray.splice(i, 1);\n\n        return globsArray;\n    }\n\n    /**\n     *  Gets the union from the given couple of glob arrays and returns\n     *  a new array of globs.\n     *  <ul>\n     *  <li>If the exact same element is found in both\n     *  arrays, one of them is removed to prevent duplicates.\n     *  <br />example: `['!id', 'name'] ∪ ['!id']` unites to `['!id', 'name']`</li>\n     *  <li>If any non-negated item is covered by a glob in the same\n     *  or other array, the redundant item is removed.\n     *  <br />example: `['*', 'name'] ∪ ['email']` unites to `['*']`</li>\n     *  <li>If one of the arrays contains a negated equivalent of an\n     *  item in the other array, the negated item is removed.\n     *  <br />example: `['!id'] ∪ ['id']` unites to `['id']`</li>\n     *  <li>If any item covers/matches a negated item in the other array,\n     *  the negated item is removed.\n     *  <br />example #1: `['!user.id'] ∪ ['user.*']` unites to `['user.*']`\n     *  <br />example #2: `['*'] ∪ ['!password']` unites to `['*']`\n     *  </li>\n     *  <li>So on... For a better understanding read the inline code\n     *  documentation.</li>\n     *  </ul>\n     *  @name Notation.Glob.union\n     *  @function\n     *\n     *  @param {Array} globsA - First array of glob strings.\n     *  @param {Array} globsB - Second array of glob strings.\n     *\n     *  @returns {Array}\n     *\n     *  @example\n     *  const a = ['foo.bar', 'bar.baz', '!*.qux'];\n     *  const b = ['!foo.bar', 'bar.qux', 'bar.baz'];\n     *  const union = Notation.Glob.union(a, b);\n     *  console.log(union);\n     *  // ['!*.qux', 'foo.bar', 'bar.baz', 'bar.qux']\n     */\n    static union(globsA, globsB) {\n        // NOTE: The logic here is quite complex. For making this easier to\n        // understand; below code is written a bit verbose. Do not modify this\n        // only to make it shorter. This will already get minified.\n\n        // -----------------------\n\n        // if any of the arrays has a single glob item of only a wildcard (e.g.\n        // `['*']`); this covers all, so...\n        if (utils.hasSingleItemOf(globsA, '*') || utils.hasSingleItemOf(globsB, '*')) {\n            return ['*'];\n        }\n\n        // clone arrays so we don't mutate the originals.\n        const arrA = globsA.concat(); // NotationGlob.normalize(globsA.concat());\n        const arrB = globsB.concat(); // NotationGlob.normalize(globsB.concat());\n        // no need to normalize. we'll do it at the end.\n\n        let reA, reB, insA, insB;\n\n        // storage for tracking (winner) negated globs that are compared with\n        // another negated in the other array. For example:\n        // ['*', '!user.*'] ∪ ['*', '!user.id']\n        // '!user.id' should be kept in the union when compared with '!user.*'.\n        // but later, '!user.id' will be unioned with '*' in the other array\n        // which will cover and remove '!user.id'. so we'll keep a storage for\n        // to prevent this.\n        let keepNegated = [];\n\n        // iterate through array A\n        utils.eachRight(arrA, (a, aIndex) => {\n            insA = NotationGlob.inspect(a);\n            reA = NotationGlob.toRegExp(insA.absGlob);\n\n            // iterate through array B for each item in A\n            utils.eachRight(arrB, (b, bIndex) => {\n                insB = NotationGlob.inspect(b);\n                reB = NotationGlob.toRegExp(insB.absGlob);\n\n                // console.log(a, 'vs', b);\n\n                if (insA.isNegated && !insB.isNegated) {\n                    // if we have the non-negated version of the same glob in B,\n                    // we'll remove item in A. In union, non-negated wins\n                    // (unlike normalize — in normalize, negated wins within the\n                    // same array).\n                    if (insA.absGlob === insB.absGlob) {\n                        arrA.splice(aIndex, 1);\n                        // console.log(`${a} removed: ${a} reverses ${b}`);\n                        // console.log(arrA, '∪', arrB);\n                        return false; // break from B\n                    }\n\n                    // remove the negated from A only if the same value is not in B.\n                    // e.g. 1)  ['!x.y'] ∪ ['x.*'] => ['x.*']\n                    // e.g. 2)  ['!x.y'] ∪ ['x.*', '!x.y'] => ['x.*', '!x.y']\n                    if (reB.test(insA.absGlob) && arrB.indexOf(a) === -1 && keepNegated.indexOf(a) === -1) {\n                        arrA.splice(aIndex, 1);\n                        // console.log(`${a} removed: ${b} covers ${a}`);\n                        // console.log(arrA, '∪', arrB);\n                        return false; // break from B\n                    }\n                }\n\n                if (!insA.isNegated && insB.isNegated) {\n                    // if we have the non-negated version of the same glob in A,\n                    // we'll remove item in B.\n                    if (insA.absGlob === insB.absGlob) {\n                        arrB.splice(bIndex, 1);\n                        // console.log(`${b} removed: ${b} reverses ${a}`);\n                        // console.log(arrA, '∪', arrB);\n                        return; // move to next in B\n                    }\n\n                    // remove the negated from B only if the same value is not in A.\n                    // e.g. 1)  ['!x.y'] ∪ ['x.*'] => ['x.*']\n                    // e.g. 2)  ['!x.y'] ∪ ['x.*', '!x.y'] => ['x.*', '!x.y']\n                    if (reA.test(insB.absGlob) && arrA.indexOf(b) === -1 && keepNegated.indexOf(b) === -1) {\n                        arrB.splice(bIndex, 1);\n                        // console.log(`${b} removed: ${a} covers ${b}`);\n                        // console.log(arrA, '∪', arrB);\n                        return; // move to next in B\n                    }\n                }\n\n                if (insA.isNegated && insB.isNegated) {\n                    // if both A and B are negated and NOT equal, we'll check\n                    // for coverage over one or the other.\n                    if (a !== b) {\n                        // if B covers A, we'll remove from B.\n                        // e.g. '!user.*' covers '!user.id'\n                        if (reB.test(insA.absGlob)) {\n                            arrB.splice(bIndex, 1);\n                            keepNegated.push(a);\n                            // console.log(`${b} removed: ${a} neg-covers ${b}`);\n                            // console.log(arrA, '∪', arrB);\n                            return; // move to next in B\n                        }\n                        // if A covers B, we'll remove from A.\n                        if (reA.test(insB.absGlob)) {\n                            arrA.splice(aIndex, 1);\n                            keepNegated.push(b);\n                            // console.log(`${a} removed: ${b} neg-covers ${a}`);\n                            // console.log(arrA, '∪', arrB);\n                            return false; // break from B\n                        }\n                    }\n                    // else, if they are equal, we'll not remove any bec. it\n                    // means both arrays disalow that glob.\n                }\n\n                if (!insA.isNegated && !insB.isNegated) {\n                    // if both A and B are NOT negated and equal, we'll remove\n                    // from A.\n                    if (a === b) {\n                        arrA.splice(aIndex, 1);\n                        // console.log(`${a} removed: ${a} === ${b}`);\n                        // console.log(arrA, '∪', arrB);\n                        return false;\n                    }\n\n                    // else -> (a !== b)\n\n                    // Leave the rest to the normalizing process\n                    // (Notation.Glob.normalize) bec. when both A and B are\n                    // non-negated, the one which is covered by the other will\n                    // be removed incorrectly.\n\n                    // For example:\n                    // ['!x.y'] ∪ ['x.*'] => ['x.*']\n                    // ['*', '!x.*'] ∪ ['*', '!x.*', 'x.o']\n                    // '*' in A will cover and remove 'x.o' in B incorrectly bec.\n                    // 'x.o' is a remainder from '!x.*' which is both in A and B.\n\n                    // So when this is left as is; the final union before\n                    // normalizing is: ['*', '!x.*', '*', 'x.o']\n                    // normalized to:  ['*', '!x.*', 'x.o']\n\n                    // if (reB.test(insA.absGlob)) {\n                    //     arrA.splice(aIndex, 1);\n                    //     console.log(`${a} removed: ${b} covers ${a}`);\n                    //     console.log(arrA, '∪', arrB);\n                    //     return false;\n                    // }\n                    // if (reA.test(insB.absGlob)) {\n                    //     arrB.splice(bIndex, 1);\n                    //     console.log(`${b} removed: ${a} covers ${b}`);\n                    //     console.log(arrA, '∪', arrB);\n                    //     return;\n                    // }\n                }\n\n            });\n        });\n\n        // concat both arrays, normalize and sort so we get a nice union array.\n        const result = arrA.concat(arrB);\n        // console.log('-->', result);\n        return NotationGlob.normalize(result);\n    }\n\n}\n\nexport default NotationGlob;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/notation.glob.js"],"sourceRoot":""}